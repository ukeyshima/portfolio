(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{76:function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r),o=n(3),a=n.n(o),c=n(4),s=n.n(c),u=n(5),l=n.n(u),f=n(6),v=n.n(f),h=n(0),d=n.n(h),p=n(24),m=n.n(p),g=n(942),R=n.n(g),F=n(943),A=n.n(F),E=function(e,t,n,r){var i=function(e,n){var r=t.createShader(n);if(t.shaderSource(r,e),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS))return r;alert(t.getShaderInfoLog(r)),console.log(t.getShaderInfoLog(r))},o=function(e,n){var r=t.createProgram();return t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)?(t.useProgram(r),r):null}(i(n,t.VERTEX_SHADER),i(r,t.FRAGMENT_SHADER)),a=[];a[0]=t.getUniformLocation(o,"time"),a[1]=t.getUniformLocation(o,"resolution");var c,s,u=[0,2,1,1,2,3],l=[],f=[],v=(c=[-1,1,0,1,1,0,-1,-1,0,1,-1,0],s=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,s),t.bufferData(t.ARRAY_BUFFER,new Float32Array(c),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),s);l[0]=t.getAttribLocation(o,"position"),f[0]=3;var h=function(e){var n=t.createBuffer();return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Int16Array(e),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),n}(u);t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,h),t.clearColor(1,0,0,1);var d=(new Date).getTime();return function(){var n,r;t.clear(t.COLOR_BUFFER_BIT),t.uniform1f(a[0],.001*((new Date).getTime()-d)),t.uniform2fv(a[1],[e.width,e.height]),n=l,r=f,[v].forEach(function(e,i,o){t.bindBuffer(t.ARRAY_BUFFER,e),t.enableVertexAttribArray(n[i]),t.vertexAttribPointer(n[i],r[i],t.FLOAT,!1,0,0)}),t.drawElements(t.TRIANGLES,u.length,t.UNSIGNED_SHORT,0),t.flush()}},y=function(e){function t(e){var n;return i()(this,t),(n=s()(this,l()(t).call(this,e))).requestId=0,n}return v()(t,e),a()(t,[{key:"componentDidMount",value:function(){this.updateCanvas()}},{key:"componentWillUnmount",value:function(){cancelAnimationFrame(this.requestId)}},{key:"updateCanvas",value:function(){var e=this;this.canvas.width=this.props.style.width,this.canvas.height=this.props.style.height,this.gl=this.canvas.getContext("webgl");var t=E(this.canvas,this.gl,R()(),A()());!function n(){t(),e.requestId=requestAnimationFrame(n)}()}},{key:"handleResize",value:function(e,t){this.canvas.width=e,this.canvas.height=t,this.gl.viewport(0,0,e,t)}},{key:"render",value:function(){var e=this;return d.a.createElement("canvas",m()({},this.props,{ref:function(t){e.canvas=t}}))}}]),t}(d.a.Component),b=n(944),w=n.n(b);n.d(t,"default",function(){return x});var x=function(e){function t(e){var n;return i()(this,t),(n=s()(this,l()(t).call(this,e))).state={width:window.innerWidth,height:window.innerHeight},n}return v()(t,e),a()(t,[{key:"componentDidMount",value:function(){w.a.use(),this.tempHandleResize=this.handleResize.bind(this),window.addEventListener("resize",this.tempHandleResize)}},{key:"componentWillUnmount",value:function(){w.a.unuse(),window.removeEventListener("resize",this.tempHandleResize)}},{key:"handleResize",value:function(e){var t=e.target.innerWidth,n=e.target.innerHeight;this.refs.createCanvas.handleResize(t,n),this.setState({width:t,height:n})}},{key:"render",value:function(){return d.a.createElement(y,{ref:"createCanvas",style:{width:this.state.width,height:this.state.height}})}}]),t}(d.a.Component)},942:function(e,t){e.exports=function(){return["attribute vec3 position;","void main(void){","    gl_Position = vec4(position, 1.0);","}"].join("\n")}},943:function(e,t){e.exports=function(){return["    precision mediump float;","    uniform float time;","    uniform vec2  resolution;    ","    float random(vec2 p){","        return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453123)*2.0-1.0;","    }","    float boxDistFunc(vec3 p,vec3 b,vec3 c){","        return length(max(abs(p-c)-b,0.0));","    }","    float floorDistFunc(vec3 p){","        vec3 q=p;","        q.xz=mod(p.xz,1.0)-0.5;","        return boxDistFunc(q,vec3(0.4,abs(random(floor(p.xz)))+abs(2.0*floor(p.z/2.0)*sin(time*1.3*random(floor(p.xz)))),0.4),vec3(0.0,0.0,0.0));","    }","    float distFunc(vec3 p){","        return floorDistFunc(p);","    }","    vec3 genNormal(vec3 p){","        float d=0.001;","        return normalize(vec3(","            distFunc(p+vec3(d,0.0,0.0))-distFunc(p+vec3(-d,0.0,0.0)),","            distFunc(p+vec3(0.0,d,0.0))-distFunc(p+vec3(0.0,-d,0.0)),","            distFunc(p+vec3(0.0,0.0,d))-distFunc(p+vec3(0.0,0.0,-d))","            ));","    }","    vec3 getRayColor(inout vec3 ray,inout vec3 origin,out bool hit){","        float distance=0.0;","        float rLen=0.0;","        vec3 rPos=origin;","        vec3 color=vec3(1.0);","        float maxDist=30.0;","        float marchCount=0.0;","        for(int i=0;i<100;i++){","            distance=distFunc(rPos);","            if(abs(distance)<0.01){","                if(distance==floorDistFunc(rPos)){","                    color=vec3(0.7,0.3,0.7);","                }","                break;","            }","            rLen += min(min((step(0.0,ray.x)-fract(rPos.x))/ray.x, (step(0.0,ray.z)-fract(rPos.z))/ray.z)+0.01,distance);","            rPos=origin+rLen*ray;","            if(rLen>maxDist){","                break;","            }","            marchCount++;","        }","        hit=false;","    if(abs(distance)<0.01){","        color+=marchCount/100.0/pow(rLen,2.0);","        vec3 normal=genNormal(rPos);","        origin=rPos+normal*0.02;","        ray=normalize(reflect(ray,normal));","        hit=true;","    }","        return color;","    }","    vec3 pixelColor(vec2 p){","        vec3 cPos=vec3(0.0,1.5+time,time);","        vec3 cDir=vec3(0.0,0.0,1.0);","        vec3 cUp=vec3(0.0,1.0,0.0);","        vec3 cSide=cross(cDir,cUp);","        float depth=1.0;","        vec3 ray=normalize(cSide*p.x+cUp*p.y+cDir*depth);","        vec3 origin=cPos;","        vec3 color=vec3(0.0);","        vec3 alpha=vec3(242.0/255.0,242.0/255.0,232.0/255.0);","        bool hit;","        for(int i=0;i<3;i++){","            color+=alpha*getRayColor(ray,origin,hit);","            alpha*=0.3;","            if(!hit)break;","        }","       return color;","    }","    ","    void main(void){","        vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);","        vec3 color=pixelColor(p);","        gl_FragColor=vec4(color,1.0);","    }"].join("\n")}},944:function(e,t,n){var r,i=0,o=n(945);"string"==typeof o&&(o=[[e.i,o,""]]),o.locals&&(t.locals=o.locals),t.use=t.ref=function(){return i++||(r=n(23)(o,{hmr:!0})),t},t.unuse=t.unref=function(){i>0&&!--i&&(r(),r=null)}},945:function(e,t,n){(e.exports=n(22)(!1)).push([e.i,"body {\n  margin: 0;\n  padding: 0;\n  overflow: hidden; }\n\n#root {\n  font-size: 0; }\n",""])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,