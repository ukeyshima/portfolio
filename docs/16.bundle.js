(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{75:function(e,n,t){"use strict";t.r(n);var i=t(2),r=t.n(i),o=t(3),a=t.n(o),c=t(4),v=t.n(c),u=t(5),f=t.n(u),s=t(6),l=t.n(s),d=t(0),h=t.n(d),m=t(24),p=t.n(m),g=t(946),R=t.n(g),w=t(947),A=t.n(w),E=function(e,n,t,i){var r=function(e,t){var i=n.createShader(t);if(n.shaderSource(i,e),n.compileShader(i),n.getShaderParameter(i,n.COMPILE_STATUS))return i;alert(n.getShaderInfoLog(i)),console.log(n.getShaderInfoLog(i))},o=function(e,t){var i=n.createProgram();return n.attachShader(i,e),n.attachShader(i,t),n.linkProgram(i),n.getProgramParameter(i,n.LINK_STATUS)?(n.useProgram(i),i):null}(r(t,n.VERTEX_SHADER),r(i,n.FRAGMENT_SHADER)),a=[];a[0]=n.getUniformLocation(o,"time"),a[1]=n.getUniformLocation(o,"resolution");var c,v,u=[0,2,1,1,2,3],f=[],s=[],l=(c=[-1,1,0,1,1,0,-1,-1,0,1,-1,0],v=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,v),n.bufferData(n.ARRAY_BUFFER,new Float32Array(c),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),v);f[0]=n.getAttribLocation(o,"position"),s[0]=3;var d=function(e){var t=n.createBuffer();return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,t),n.bufferData(n.ELEMENT_ARRAY_BUFFER,new Int16Array(e),n.STATIC_DRAW),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null),t}(u);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,d),n.clearColor(1,0,0,1);var h=(new Date).getTime();return function(){var t,i,r=.001*((new Date).getTime()-h);n.clear(n.COLOR_BUFFER_BIT),n.uniform1f(a[0],r),n.uniform2fv(a[1],[e.width,e.height]),t=f,i=s,[l].forEach(function(e,r,o){n.bindBuffer(n.ARRAY_BUFFER,e),n.enableVertexAttribArray(t[r]),n.vertexAttribPointer(t[r],i[r],n.FLOAT,!1,0,0)}),n.drawElements(n.TRIANGLES,u.length,n.UNSIGNED_SHORT,0),n.flush()}},y=function(e){function n(e){var t;return r()(this,n),(t=v()(this,f()(n).call(this,e))).requestId=0,t}return l()(n,e),a()(n,[{key:"componentDidMount",value:function(){this.updateCanvas()}},{key:"componentWillUnmount",value:function(){cancelAnimationFrame(this.requestId)}},{key:"updateCanvas",value:function(){var e=this;this.canvas.width=this.props.style.width,this.canvas.height=this.props.style.height,this.gl=this.canvas.getContext("webgl");var n=E(this.canvas,this.gl,R()(),A()());!function t(){n(),e.requestId=requestAnimationFrame(t)}()}},{key:"handleResize",value:function(e,n){this.canvas.width=e,this.canvas.height=n,this.gl.viewport(0,0,e,n)}},{key:"render",value:function(){var e=this;return h.a.createElement("canvas",p()({},this.props,{ref:function(n){e.canvas=n}}))}}]),n}(h.a.Component),k=t(948),x=t.n(k);t.d(n,"default",function(){return F});var F=function(e){function n(e){var t;return r()(this,n),(t=v()(this,f()(n).call(this,e))).state={width:window.innerWidth,height:window.innerHeight},t}return l()(n,e),a()(n,[{key:"componentDidMount",value:function(){x.a.use(),this.tempHandleResize=this.handleResize.bind(this),window.addEventListener("resize",this.tempHandleResize)}},{key:"componentWillUnmount",value:function(){x.a.unuse(),window.removeEventListener("resize",this.tempHandleResize)}},{key:"handleResize",value:function(e){var n=e.target.innerWidth,t=e.target.innerHeight;this.refs.createCanvas.handleResize(n,t),this.setState({width:n,height:t})}},{key:"render",value:function(){return h.a.createElement(y,{ref:"createCanvas",style:{width:this.state.width,height:this.state.height}})}}]),n}(h.a.Component)},946:function(e,n){e.exports=function(){return["attribute vec3 position;","void main(void){","    gl_Position = vec4(position, 1.0);","}"].join("\n")}},947:function(e,n){e.exports=function(){return["precision mediump float;","uniform float time;","uniform vec2  resolution;","#define PI 3.141592","float random1(vec3 p){","    return fract(sin(dot(p.xyz,vec3(12.9898,46.2346,78.233)))*43758.5453123)*2.0-1.0;","}","float random2(vec3 p){","    return fract(sin(dot(p.xyz,vec3(73.6134,21.6712,51.5781)))*51941.3781931)*2.0-1.0;","}","float random3(vec3 p){","    return fract(sin(dot(p.xyz,vec3(39.1831,85.3813,16.2981)))*39183.4971731)*2.0-1.0;","}","float perlinNoise(vec3 p){","    vec3 i1=floor(p);    ","    vec3 i2=i1+vec3(1.0,0.0,0.0);","    vec3 i3=i1+vec3(0.0,1.0,0.0);","    vec3 i4=i1+vec3(1.0,1.0,0.0);","    vec3 i5=i1+vec3(0.0,0.0,1.0);","    vec3 i6=i1+vec3(1.0,0.0,1.0);","    vec3 i7=i1+vec3(0.0,1.0,1.0);","    vec3 i8=i1+vec3(1.0,1.0,1.0);","    vec3 f1=vec3(random1(i1),random2(i1),random3(i1));","    vec3 f2=vec3(random1(i2),random2(i2),random3(i2));","    vec3 f3=vec3(random1(i3),random2(i3),random3(i3));","    vec3 f4=vec3(random1(i4),random2(i4),random3(i4));","    vec3 f5=vec3(random1(i5),random2(i5),random3(i5));","    vec3 f6=vec3(random1(i6),random2(i6),random3(i6));","    vec3 f7=vec3(random1(i7),random2(i7),random3(i7));","    vec3 f8=vec3(random1(i8),random2(i8),random3(i8));","    vec3 k1=p-i1;","    vec3 k2=p-i2;","    vec3 k3=p-i3;","    vec3 k4=p-i4;","    vec3 k5=p-i5;","    vec3 k6=p-i6;","    vec3 k7=p-i7;","    vec3 k8=p-i8;","    vec3 j=fract(p);","    j=j*j*(3.0-2.0*j);","    return (((dot(f1,k1)*(1.0-j.x)+dot(f2,k2)*j.x)*(1.0-j.y)+(dot(f3,k3)*(1.0-j.x)+dot(f4,k4)*j.x)*j.y)*(1.0-j.z)+((dot(f5,k5)*(1.0-j.x)+dot(f6,k6)*j.x)*(1.0-j.y)+(dot(f7,k7)*(1.0-j.x)+dot(f8,k8)*j.x)*j.y)*j.z)*0.95+0.05;","}","float octavePerlinNoise(vec3 p){","float value=0.0;","float maxValue=0.0;","for(float i=0.0;i<7.0;i++){","    value+=pow(0.5,i)*perlinNoise(vec3(p.x*pow(2.0,i),p.y*pow(2.0,i),p.z*pow(2.0,i)));","    maxValue+=pow(0.5,i);","}","return value/maxValue;","}","vec3 polarCoordinate(vec3 p){","    float r=length(p);","    float theta1=atan(p.x,p.z);","    float theta2=atan(p.y,p.z);","    return vec3(r,theta1,theta2);","}","void main(void){    ","    vec2 p = (gl_FragCoord.xy*2.0 - resolution) / min(resolution.x,resolution.y);   ","    p*=5.0; ","    ","    vec3 cDir=normalize(vec3(0.0,0.0,1.0));","    vec3 cUp=normalize(vec3(0.0,1.0,0.0));","    float dipth=2.0;","    vec3 cSide=normalize(cross(cDir,cUp));","    vec3 ray=normalize(cSide*p.x+cUp*p.y+cDir*dipth); ","    vec3 c=vec3(0.0,0.0,time);","    vec3 color=vec3(0.9,0.2,0.4);","    for(float i=0.0;i<6.0;i++){","        color+=octavePerlinNoise(c);","        c+=normalize(ray);","    }    ","    gl_FragColor=vec4(color,1.0);","}"].join("\n")}},948:function(e,n,t){var i,r=0,o=t(949);"string"==typeof o&&(o=[[e.i,o,""]]),o.locals&&(n.locals=o.locals),n.use=n.ref=function(){return r++||(i=t(23)(o,{hmr:!0})),n},n.unuse=n.unref=function(){r>0&&!--r&&(i(),i=null)}},949:function(e,n,t){(e.exports=t(22)(!1)).push([e.i,"body {\n  margin: 0;\n  padding: 0;\n  overflow: hidden; }\n\n#root {\n  font-size: 0; }\n",""])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,