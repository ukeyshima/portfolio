(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{74:function(e,t,n){"use strict";n.r(t);var i=n(2),o=n.n(i),r=n(3),a=n.n(r),c=n(4),s=n.n(c),l=n(5),u=n.n(l),h=n(6),v=n.n(h),d=n(0),f=n.n(d),m=n(24),p=n.n(m),g=n(950),F=n.n(g),R=n(951),P=n.n(R),w=function(e,t,n,i){var o=function(e,n){var i=t.createShader(n);if(t.shaderSource(i,e),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS))return i;alert(t.getShaderInfoLog(i)),console.log(t.getShaderInfoLog(i))},r=function(e,n){var i=t.createProgram();return t.attachShader(i,e),t.attachShader(i,n),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS)?(t.useProgram(i),i):null}(o(n,t.VERTEX_SHADER),o(i,t.FRAGMENT_SHADER)),a=[];a[0]=t.getUniformLocation(r,"time"),a[1]=t.getUniformLocation(r,"resolution");var c,s,l=[0,2,1,1,2,3],u=[],h=[],v=(c=[-1,1,0,1,1,0,-1,-1,0,1,-1,0],s=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,s),t.bufferData(t.ARRAY_BUFFER,new Float32Array(c),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),s);u[0]=t.getAttribLocation(r,"position"),h[0]=3;var d=function(e){var n=t.createBuffer();return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Int16Array(e),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),n}(l);t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,d),t.clearColor(1,0,0,1);var f=(new Date).getTime();return function(){var n,i;t.clear(t.COLOR_BUFFER_BIT),t.uniform1f(a[0],.001*((new Date).getTime()-f)),t.uniform2fv(a[1],[e.width,e.height]),n=u,i=h,[v].forEach(function(e,o,r){t.bindBuffer(t.ARRAY_BUFFER,e),t.enableVertexAttribArray(n[o]),t.vertexAttribPointer(n[o],i[o],t.FLOAT,!1,0,0)}),t.drawElements(t.TRIANGLES,l.length,t.UNSIGNED_SHORT,0),t.flush()}},b=function(e){function t(e){var n;return o()(this,t),(n=s()(this,u()(t).call(this,e))).requestId=0,n}return v()(t,e),a()(t,[{key:"componentDidMount",value:function(){this.updateCanvas()}},{key:"componentWillUnmount",value:function(){cancelAnimationFrame(this.requestId)}},{key:"updateCanvas",value:function(){var e=this;this.canvas.width=this.props.style.width,this.canvas.height=this.props.style.height,this.gl=this.canvas.getContext("webgl");var t=w(this.canvas,this.gl,F()(),P()());!function n(){t(),e.requestId=requestAnimationFrame(n)}()}},{key:"handleResize",value:function(e,t){this.canvas.width=e,this.canvas.height=t,this.gl.viewport(0,0,e,t)}},{key:"render",value:function(){var e=this;return f.a.createElement("canvas",p()({},this.props,{ref:function(t){e.canvas=t}}))}}]),t}(f.a.Component),E=n(952),A=n.n(E);n.d(t,"default",function(){return D});var D=function(e){function t(e){var n;return o()(this,t),(n=s()(this,u()(t).call(this,e))).state={width:window.innerWidth,height:window.innerHeight},n}return v()(t,e),a()(t,[{key:"componentDidMount",value:function(){A.a.use(),this.tempHandleResize=this.handleResize.bind(this),window.addEventListener("resize",this.tempHandleResize)}},{key:"componentWillUnmount",value:function(){A.a.unuse(),window.removeEventListener("resize",this.tempHandleResize)}},{key:"handleResize",value:function(e){var t=e.target.innerWidth,n=e.target.innerHeight;this.refs.createCanvas.handleResize(t,n),this.setState({width:t,height:n})}},{key:"render",value:function(){return f.a.createElement(b,{ref:"createCanvas",style:{width:this.state.width,height:this.state.height}})}}]),t}(f.a.Component)},950:function(e,t){e.exports=function(){return["attribute vec3 position;","void main(void){","    gl_Position = vec4(position, 1.0);","}"].join("\n")}},951:function(e,t){e.exports=function(){return["precision mediump float;","uniform float time;","uniform vec2  resolution;","#define PI 3.141592","const vec3 lightPos=vec3(0.0,5.0,5.0);","const vec3 ambientColor=vec3(0.05);","const vec3 cPos=vec3(0.0,3.0,12.0);","const vec3 cDir=vec3(0.0,-.2,-1.0);","const vec3 cUp=vec3(0.0,1.0,0.0);","float sphereDistFunc(vec3 p,vec3 c,float radius){","    return length(p-c)-radius;","}","float planeDistFunc(vec3 p){","    vec3 pos=vec3(0.0,1.0,0.0);","    vec3 n=normalize(pos);","    return dot(p,n)+2.0;","}","float distFunc(vec3 p){","    float obj1,obj2,obj3,obj4,obj5;","    obj1=sphereDistFunc(p,vec3(0.0,cos(time),0.0),2.0);","    obj2=planeDistFunc(p);","    obj3=sphereDistFunc(p,vec3(5.0*(2.0+cos(1.2*time))*sin(time),-1.0,5.0*cos(time)),1.0);","    obj4=sphereDistFunc(p,vec3(5.0*(3.0+cos(1.5*time))*sin(time+PI*2.0/3.0),-1.0,5.0*cos(time+PI*2.0/3.0)),1.0);","    obj5=sphereDistFunc(p,vec3(5.0*(2.0+sin(1.7*time))*sin(time+PI*4.0/3.0),-1.0,5.0*cos(time+PI*4.0/3.0)),1.0);","    return min(min(min(min(obj1,obj2),obj3),obj4),obj5);","}","vec3 genNormal(vec3 p){","    float d=0.001;","    return normalize(vec3(","        distFunc(p+vec3(d,0.0,0.0))-distFunc(p+vec3(-d,0.0,0.0)),","        distFunc(p+vec3(0.0,d,0.0))-distFunc(p+vec3(0.0,-d,0.0)),","        distFunc(p+vec3(0.0,0.0,d))-distFunc(p+vec3(0.0,0.0,-d))","        ));","}","float genShadow(vec3 o,vec3 lightPos){","    vec3 lightVec=normalize(lightPos);","    float h=0.0;","    float c=0.001;","    float r=1.0;","    float shadowCoef=0.5;","    for(int i=0;i<30;i++){","    h=distFunc(o+lightVec*c);","    if(h<0.02)return shadowCoef;","    r=min(r,h*16.0/c);","    c+=h;","    }","    return 1.0+shadowCoef*(r-1.0);","}","vec3 getRayColor(inout vec3 ray,inout vec3 origin){","    float distance=0.0;","    float rLen=0.0;","    vec3 rPos=origin;","    vec3 color=vec3(0.62);","    vec3 normal,specular,halfLE;","    float shadow;","    float maxDist=70.0;","    for(int i=0;i<120;i++){","        distance=distFunc(rPos);","        if(abs(distance)<0.01){","             if(distance==planeDistFunc(rPos)){","                color=(mod(rPos.x,6.0)<3.0&&mod(rPos.z,6.0)<3.0 ||mod(rPos.x,6.0)>3.0&&mod(rPos.z,6.0)>3.0)?vec3(1.0):vec3(0.0);","             }else if(distance==sphereDistFunc(rPos,vec3(0.0,cos(time),0.0),2.0)){","                color=vec3(0.0,1.0,1.0);","             }else if(distance==sphereDistFunc(rPos,vec3(5.0*(2.0+cos(1.2*time))*sin(time),-1.0,5.0*cos(time)),1.0)){","                color=vec3(1.0,0.0,0.0);","            }else if(distance==sphereDistFunc(rPos,vec3(5.0*(3.0+cos(1.5*time))*sin(time+PI*2.0/3.0),-1.0,5.0*cos(time+PI*2.0/3.0)),1.0)){","                color=vec3(1.0,1.0,0.0);","            }else if(distance==sphereDistFunc(rPos,vec3(5.0*(2.0+sin(1.7*time))*sin(time+PI*4.0/3.0),-1.0,5.0*cos(time+PI*4.0/3.0)),1.0)){","                color=vec3(1.0,0.0,1.0);","            }","            normal=genNormal(rPos);","            origin=rPos+normal*0.02;","            ray=normalize(reflect(ray,normal));","            halfLE=normalize(lightPos-cDir);","            specular=vec3(pow(clamp(dot(normal,halfLE),0.0,1.0),50.0));","            shadow=genShadow(rPos+normal*0.001,lightPos);","            color=(color*vec3(clamp(dot(lightPos,normal),0.0,1.0))+specular+ambientColor)*max(0.5,shadow)+rLen/100.0*0.8;","            break;","        }","        rLen+=distance;","        rPos=origin+rLen*ray;","        if(rLen>maxDist){","            break;","        }","    }","        return color;","    ","}","void main(void){","    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);    ","    const vec3 cSide=cross(cDir,cUp);","    const float targetDepth=1.0;","    vec3 ray=normalize(cSide*p.x+cUp*p.y+cDir*targetDepth);","    vec3 origin=cPos;","    vec3 destColor=vec3(0.0);","    vec3 alpha=vec3(0.7,0.7,0.67);","    for(int i=0;i<3;i++){","        destColor+=alpha*getRayColor(ray,origin);","        alpha*=0.7;","    }","    gl_FragColor=vec4(destColor,1.0);","}"].join("\n")}},952:function(e,t,n){var i,o=0,r=n(953);"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(t.locals=r.locals),t.use=t.ref=function(){return o++||(i=n(23)(r,{hmr:!0})),t},t.unuse=t.unref=function(){o>0&&!--o&&(i(),i=null)}},953:function(e,t,n){(e.exports=n(22)(!1)).push([e.i,"body {\n  margin: 0;\n  padding: 0;\n  overflow: hidden; }\n\n#root {\n  font-size: 0; }\n",""])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,