(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{73:function(e,t,n){"use strict";n.r(t);var i=n(2),r=n.n(i),o=n(3),a=n.n(o),c=n(4),s=n.n(c),l=n(5),u=n.n(l),f=n(6),h=n.n(f),d=n(0),v=n.n(d),m=n(24),p=n.n(m),g=n(954),R=n.n(g),F=n(955),w=n.n(F),A=function(e,t,n,i){var r=function(e,n){var i=t.createShader(n);if(t.shaderSource(i,e),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS))return i;alert(t.getShaderInfoLog(i)),console.log(t.getShaderInfoLog(i))},o=function(e,n){var i=t.createProgram();return t.attachShader(i,e),t.attachShader(i,n),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS)?(t.useProgram(i),i):null}(r(n,t.VERTEX_SHADER),r(i,t.FRAGMENT_SHADER)),a=[];a[0]=t.getUniformLocation(o,"time"),a[1]=t.getUniformLocation(o,"resolution");var c,s,l=[0,2,1,1,2,3],u=[],f=[],h=(c=[-1,1,0,1,1,0,-1,-1,0,1,-1,0],s=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,s),t.bufferData(t.ARRAY_BUFFER,new Float32Array(c),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),s);u[0]=t.getAttribLocation(o,"position"),f[0]=3;var d=function(e){var n=t.createBuffer();return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Int16Array(e),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),n}(l);t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,d),t.clearColor(1,0,0,1);var v=(new Date).getTime();return function(){var n,i;t.clear(t.COLOR_BUFFER_BIT),t.uniform1f(a[0],.001*((new Date).getTime()-v)),t.uniform2fv(a[1],[e.width,e.height]),n=u,i=f,[h].forEach(function(e,r,o){t.bindBuffer(t.ARRAY_BUFFER,e),t.enableVertexAttribArray(n[r]),t.vertexAttribPointer(n[r],i[r],t.FLOAT,!1,0,0)}),t.drawElements(t.TRIANGLES,l.length,t.UNSIGNED_SHORT,0),t.flush()}},E=function(e){function t(e){var n;return r()(this,t),(n=s()(this,u()(t).call(this,e))).requestId=0,n}return h()(t,e),a()(t,[{key:"componentDidMount",value:function(){this.updateCanvas()}},{key:"componentWillUnmount",value:function(){cancelAnimationFrame(this.requestId)}},{key:"updateCanvas",value:function(){var e=this;this.canvas.width=this.props.style.width,this.canvas.height=this.props.style.height,this.gl=this.canvas.getContext("webgl");var t=A(this.canvas,this.gl,R()(),w()());!function n(){t(),e.requestId=requestAnimationFrame(n)}()}},{key:"handleResize",value:function(e,t){this.canvas.width=e,this.canvas.height=t,this.gl.viewport(0,0,e,t)}},{key:"render",value:function(){var e=this;return v.a.createElement("canvas",p()({},this.props,{ref:function(t){e.canvas=t}}))}}]),t}(v.a.Component),b=n(956),y=n.n(b);n.d(t,"default",function(){return x});var x=function(e){function t(e){var n;return r()(this,t),(n=s()(this,u()(t).call(this,e))).state={width:window.innerWidth,height:window.innerHeight},n}return h()(t,e),a()(t,[{key:"componentDidMount",value:function(){y.a.use(),this.tempHandleResize=this.handleResize.bind(this),window.addEventListener("resize",this.tempHandleResize)}},{key:"componentWillUnmount",value:function(){y.a.unuse(),window.removeEventListener("resize",this.tempHandleResize)}},{key:"handleResize",value:function(e){var t=e.target.innerWidth,n=e.target.innerHeight;this.refs.createCanvas.handleResize(t,n),this.setState({width:t,height:n})}},{key:"render",value:function(){return v.a.createElement(E,{ref:"createCanvas",style:{width:this.state.width,height:this.state.height}})}}]),t}(v.a.Component)},954:function(e,t){e.exports=function(){return["attribute vec3 position;","void main(void){","    gl_Position = vec4(position, 1.0);","}"].join("\n")}},955:function(e,t){e.exports=function(){return["    precision mediump float;","    uniform float time;","    uniform vec2 resolution;    ","    float random(vec2 p){","        return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453123)*2.0-1.0;","    }","    float random(float p){","        return fract(sin(p*43758.5453123));","    }","    float boxDistFunc(vec3 p,vec3 b,vec3 c){","        return length(max(abs(p-c)-b,0.0));","    }","    float floorDistFunc(vec3 p){","        vec3 q=p;","        q.xz=mod(p.xz,1.0)-0.5;","        float width=clamp(sin(-length(floor(p.xz)/2.0)+time*4.0)*0.48,0.2,0.48);","        float height=4.0*(abs(sin(time*2.0))+1.0)+width*10.0+length(floor(p.xz))/8.0;","        return boxDistFunc(q,vec3(width,height","        ,width),vec3(0.0,0.0,0.0));","    }","    float distFunc(vec3 p){","        return floorDistFunc(p);","    }","    vec3 genNormal(vec3 p){","        float d=0.001;","        return normalize(vec3(","            distFunc(p+vec3(d,0.0,0.0))-distFunc(p+vec3(-d,0.0,0.0)),","            distFunc(p+vec3(0.0,d,0.0))-distFunc(p+vec3(0.0,-d,0.0)),","            distFunc(p+vec3(0.0,0.0,d))-distFunc(p+vec3(0.0,0.0,-d))","            ));","    }","    vec3 getRayColor(inout vec3 ray,inout vec3 origin,out bool hit){","        float distance=0.0;","        float rLen=0.0;","        vec3 rPos=origin;","        vec3 color=vec3(1.0);","        float maxDist=1000.0;","        float marchCount=0.0;","        for(int i=0;i<150;i++){","            distance=distFunc(rPos);","            if(abs(distance)<0.01){","                if(distance==floorDistFunc(rPos)){","                    color=vec3(0.7-0.1*abs(sin(length(floor(rPos.xz))/2.0+time)),1.0-0.7*abs(sin(length(floor(rPos.xz))/3.0+time)),0.9-0.2*abs(sin(length(floor(rPos.xz))+time)));","                }","                break;","            }","            rLen += min(min((step(0.0,ray.x)-fract(rPos.x))/ray.x, (step(0.0,ray.z)-fract(rPos.z))/ray.z)+0.01,distance);","            ","            rPos=origin+rLen*ray;","            if(rLen>maxDist){","                break;","            }","            marchCount++;","        }","        hit=false;","    if(abs(distance)<0.01){","        color+=marchCount/100.0/pow(rLen,2.0);","        vec3 normal=genNormal(rPos);","        origin=rPos+normal*0.02;","        ray=normalize(reflect(ray,normal));","        hit=true;","    }","        return color;","    }","    vec3 pixelColor(vec2 p){","        vec3 cPos=vec3(cos(time)*2.0,19.0+cos(time/3.0)*5.0,-5.0+sin(time/2.0)*5.0);","        vec3 cDir=vec3(sin(time/5.0),-0.5+0.3*cos(time),1.0);","        vec3 cUp=mat3(1.0,0.0,0.0,","                      0.0,0.0,-1.0,","                      0.0,1.0,0.0)*cDir;","        vec3 cSide=cross(cDir,cUp);","        float depth=1.0;","        vec3 ray=normalize(cSide*p.x+cUp*p.y+cDir*depth);","        vec3 origin=cPos;","        vec3 color=vec3(0.0);","        float alpha=242.0/255.0;","        bool hit;","        for(int i=0;i<3;i++){","            color+=alpha*getRayColor(ray,origin,hit);","            alpha*=0.2;","            if(!hit)break;","        }","       return color;","    }","    ","    void main(void){","        vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);","        vec3 color=pixelColor(p);","        gl_FragColor=vec4(color,1.0);","    }"].join("\n")}},956:function(e,t,n){var i,r=0,o=n(957);"string"==typeof o&&(o=[[e.i,o,""]]),o.locals&&(t.locals=o.locals),t.use=t.ref=function(){return r++||(i=n(23)(o,{hmr:!0})),t},t.unuse=t.unref=function(){r>0&&!--r&&(i(),i=null)}},957:function(e,t,n){(e.exports=n(22)(!1)).push([e.i,"body {\n  margin: 0;\n  padding: 0;\n  overflow: hidden; }\n\n#root {\n  font-size: 0; }\n",""])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,