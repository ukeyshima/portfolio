(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{345:function(e,t,n){var a,o=0,r=n(346);"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(t.locals=r.locals),t.use=t.ref=function(){return o++||(a=n(23)(r,{hmr:!0})),t},t.unuse=t.unref=function(){o>0&&!--o&&(a(),a=null)}},346:function(e,t,n){(e.exports=n(22)(!1)).push([e.i,"body {\n  background: #ddd;\n  overflow: hidden;\n  margin: 0; }\n\n#header {\n  position: absolute;\n  background-color: #eee;\n  height: 30px;\n  width: 100vw;\n  z-index: 25; }\n  #header button {\n    height: 30px;\n    width: 100px;\n    font-size: 20px;\n    background-color: #eee;\n    border: none;\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    position: absolute; }\n\n#file {\n  left: 0;\n  z-index: 22; }\n\n#mode {\n  left: 100px;\n  z-index: 22; }\n\n#runAndStop {\n  background-color: #ddd;\n  position: absolute;\n  top: 30px;\n  width: 100%;\n  height: 50px;\n  z-index: 24; }\n  #runAndStop button {\n    width: 50px;\n    height: 50px;\n    font-size: 30px;\n    border-radius: 100%;\n    border: none;\n    outline: 0;\n    margin: 0 0 0 10px;\n    line-height: 50%;\n    padding: 0; }\n\n#tab {\n  position: absolute;\n  top: 80px;\n  width: 100vw;\n  height: 30px;\n  background-color: #ccc;\n  z-index: 24; }\n  #tab button {\n    margin: 0 2px;\n    padding: 0 10px;\n    height: 29px;\n    float: left;\n    font-size: 15px;\n    outline: 0;\n    background-color: #ccc;\n    border-style: hidden solid;\n    border-color: #888;\n    border-width: 1px;\n    text-align: center;\n    vertical-align: middle; }\n\n#addButton {\n  background-color: #ccc;\n  color: #000;\n  width: 30px;\n  z-index: 24; }\n\n.dropDown {\n  background-color: #fff;\n  border-radius: 10px;\n  color: #444;\n  position: absolute;\n  z-index: 25;\n  text-align: center;\n  box-shadow: 2px 2px 10px gray;\n  z-index: 24; }\n  .dropDown button {\n    background-color: #fff;\n    border: none;\n    font-size: 15px;\n    border-radius: 10px;\n    outline: 0; }\n\n#createTextForm {\n  width: 160px;\n  height: 75px;\n  z-index: 24; }\n  #createTextForm button {\n    background-color: #fff;\n    border: none;\n    margin: 0;\n    width: 160px;\n    height: 30px; }\n\n#modeSelect {\n  width: 200px;\n  z-index: 24; }\n  #modeSelect button {\n    position: relative;\n    font-size: 15px;\n    background-color: #fff;\n    border: none;\n    margin: 0;\n    width: 200px;\n    height: 30px; }\n\n#fileName {\n  width: 80%;\n  outline: 0;\n  border: none;\n  border-bottom-style: solid;\n  text-align: center;\n  font-size: 15px;\n  border-bottom-width: 2px;\n  z-index: 24; }\n\n#extensionSelection {\n  z-index: 1;\n  width: 100%;\n  font-size: 15px;\n  color: #000;\n  margin: 0;\n  z-index: 24; }\n\n#extensions {\n  position: absolute;\n  z-index: 6;\n  background-color: #eee;\n  width: 160px;\n  height: 75px;\n  left: 5px;\n  box-shadow: 2px 2px 10px gray;\n  border-radius: 7px;\n  overflow: auto;\n  z-index: 24; }\n\n.extension {\n  margin: 0;\n  padding: 0;\n  font-size: 15px;\n  z-index: 24; }\n\n#result {\n  background-color: #000;\n  color: #fff;\n  text-align: center;\n  line-height: 500%;\n  font-size: 15px;\n  overflow: auto;\n  z-index: 24; }\n\n#handWritingFormulaArea {\n  border: #000 1px solid;\n  z-index: 20; }\n  #handWritingFormulaArea .ms-editor {\n    background-color: #fff; }\n\n.handWritingFormulaAreaButton {\n  background-color: #00b99e;\n  color: #fff;\n  width: 30px;\n  height: 30px;\n  font-size: 20px;\n  position: absolute;\n  padding: 4px;\n  z-index: 21;\n  bottom: 3px;\n  border-radius: 50%;\n  border-color: #00b99e;\n  outline: none; }\n\n#deleteButton {\n  padding: 0;\n  right: calc(30px * 6 + 61px); }\n\n#clearButton {\n  padding: 0;\n  right: calc(30px * 5 + 51px); }\n\n#undoButton {\n  right: calc(30px * 4 + 41px); }\n\n#redoButton {\n  right: calc(30px * 3 + 31px); }\n\n#convertButton {\n  right: calc(30px * 2 + 21px); }\n\n#insertCodeButton {\n  right: calc(30px * 1 + 11px); }\n\n#exchangeButton {\n  right: calc(30px * 0 + 3px);\n  bottom: 5px;\n  z-index: 23; }\n\n.marker {\n  background-color: #f00;\n  position: absolute; }\n\n#resultVariableView {\n  position: absolute;\n  z-index: 21;\n  bottom: 5px;\n  left: 5px;\n  border: solid 1px;\n  padding: 1px 4px;\n  color: #fff;\n  background-color: #00b99e;\n  font-family: 'arial'; }\n",""])},368:function(module,__webpack_exports__,__webpack_require__){"use strict";var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(34),_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__),katex=__webpack_require__(218),mathjs=__webpack_require__(219),mathIntegral=__webpack_require__(276),atl=__webpack_require__(292),acorn=__webpack_require__(808);mathjs.import(mathIntegral);var code="",latex2js,radix,frac,pow,sin,cos,tan,leftright,naturalLog,log,sum,definiteIntegral,indefiniteIntegral,differential,limit,matrix,dot,matrixMultiplication,matrixOperations,_matrixLeftRightShape,_shape,nextMulti,codeSearchVariable,codeSearchArray,codeSearchFunction,splitCodeClose,_vecShape,isVector;splitCodeClose=function(e){return/=[\n\s]*$/.test(e)&&(e+="''"),e.split("{").length>e.split("}").length?e+="".concat(function(){for(var t="",n=0;n<e.split("{").length-e.split("}").length;n++)t+="}";return t}()):e.split("{").length<e.split("}").length&&(e="".concat(function(){for(var t="",n=0;n<e.split("}").length-e.split("{").length;n++)t+="{";return t}())+e),e.split("(").length>e.split(")").length?e+="".concat(function(){for(var t="",n=0;n<e.split("(").length-e.split(")").length;n++)t+=")";return t}()):e.split("(").length<e.split(")").length&&(e="".concat(function(){for(var t="",n=0;n<e.split(")").length-e.split("(").length;n++)t+="(";return t}())+e),/^[\s\n]*\([\s\S]*\)[\s\n\;]*$/.test(e)&&(e=(e=e.replace(/^[\s\n]*\(/,"")).replace(/\)[\s\n;]*$/,"")),/return/.test(e)&&(e=e.replace("return","")),/break/.test(e)&&(e=e.replace("break","")),e},codeSearchVariable=function(e,t){var n=e.match(/\/\*\d+\*\//)[0],a=e.split(n);/=[\n\s]*$/.test(a[0])&&(a[0]=a[0].replace(/=[\n\s]*$/,"=0;"));var o="\n const ".concat("yukiShimadaHa22Sai",'="').concat("yukiShimadaHa22Sai",'";\n');/=>[\s\n]*$/.test(a[0])?a[0]+="{\n      ".concat(o,"}"):a[0]=a[0]+o;var r=[];!function e(t){for(var n=t,o=0,c="",i=a[0].length-1;i>=0;i--){var l=a[0][i];if("}"===l?n++:"{"===l&&o++,n===o){r.push(c),e(t+1);break}c=l+c,0===i&&r.push(c)}}(1);var c=[];return r.forEach(function(e){try{c.push(acorn.parse(splitCodeClose(e)).body.some(function(e){return e.type&&"VariableDeclaration"===e.type&&e.declarations&&!e.declarations.some(function(e){return e.init&&e.init.type&&"ArrowFunctionExpression"===e.init.type})&&e.declarations.some(function(e){return e.id&&e.id.name&&e.id.name===t})||"FunctionDeclaration"===e.type&&e.params&&e.params.some(function(e){return e.type&&"Identifier"===e.type&&e.name&&e.name===t})&&e.body&&e.body.body&&e.body.body.some(function(e){return e.type&&"VariableDeclaration"===e.type&&e.declarations&&e.declarations.some(function(e){return e.type&&"VariableDeclarator"===e.type&&e.id&&e.id.type&&"Identifier"===e.id.type&&e.id.name&&"yukiShimadaHa22Sai"===e.id.name&&e.init&&e.init.type&&"Literal"===e.init.type&&e.init.value&&"yukiShimadaHa22Sai"===e.init.value})})||"VariableDeclaration"===e.type&&e.declarations&&e.declarations.some(function(e){return e.init&&e.init.type&&"ArrowFunctionExpression"===e.init.type&&e.init.params&&e.init.params.some(function(e){return e.type&&"Identifier"===e.type&&e.name&&e.name===t})&&e.init.body&&e.init.body.body&&e.init.body.body.some(function(e){return e.type&&"VariableDeclaration"===e.type&&e.declarations&&e.declarations.some(function(e){return e.type&&"VariableDeclarator"===e.type&&e.id&&e.id.type&&"Identifier"===e.id.type&&e.id.name&&"yukiShimadaHa22Sai"===e.id.name&&e.init.type&&"Literal"===e.init.type&&e.init.value&&"yukiShimadaHa22Sai"===e.init.value})})})||"ForStatement"===e.type&&e.test&&e.test.type&&"BinaryExpression"===e.test.type&&e.test.left&&e.test.left.type&&"Identifier"===e.test.left.type&&e.test.left.name&&e.test.left.name===t&&e.body&&e.body.type&&"BlockStatement"===e.body.type&&e.body.body&&e.body.body.some(function(e){return e.type&&"VariableDeclaration"===e.type&&e.declarations&&e.declarations.some(function(e){return e.type&&"VariableDeclarator"===e.type&&e.id&&e.id.type&&"Identifier"===e.id.type&&e.id.name&&"yukiShimadaHa22Sai"===e.id.name&&e.init&&e.init.type&&"Literal"===e.init.type&&e.init.value&&"yukiShimadaHa22Sai"===e.init.value})})}))}catch(e){console.log(e)}}),c.length>0&&c.reduce(function(e,t){return e||t})},codeSearchFunction=function(e,t){var n=e.split(/\/\*\d+\*\//),a=[],o=[];!function e(t){for(var o=t,r=0,c="",i=n[0].length-1;i>=0;i--){var l=n[0][i];if("}"===l?o++:"{"===l&&r++,o===r){a.push(c),e(t+1);break}c=l+c,0===i&&a.push(c)}}(1),function e(t){for(var a=t,r=0,c="",i=0;i<n[1].length;i++){var l=n[1][i];if("{"===l?a++:"}"===l&&r++,a===r){o.push(c),e(t+1);break}c+=l,i===n[1].length-1&&o.push(c)}}(1);var r=[],c=[];return a.forEach(function(e){try{r.push(acorn.parse(splitCodeClose(e)).body.some(function(e){return"VariableDeclaration"===e.type&&e.declarations.some(function(e){return"ArrowFunctionExpression"===e.init.type})&&e.declarations.some(function(e){return e.id.name===t})||"FunctionDeclaration"===e.type&&e.id.name===t}))}catch(e){console.log(e)}}),o.forEach(function(e){try{c.push(acorn.parse(splitCodeClose(e)).body.some(function(e){return"FunctionDeclaration"===e.type&&e.id.name===t}))}catch(e){console.log(e)}}),r.length>0&&c.length>0&&(r.reduce(function(e,t){return e||t})||c.reduce(function(e,t){return e||t}))},codeSearchArray=function(e,t){var n=e.split(/\/\*\d+\*\//),a=[];!function e(t){for(var o=t,r=0,c="",i=n[0].length-1;i>=0;i--){var l=n[0][i];if("}"===l?o++:"{"===l&&r++,o===r){a.push(c),e(t+1);break}c=l+c,0===i&&a.push(c)}}(1);var o=[];return a.forEach(function(e){try{o.push(acorn.parse(splitCodeClose(e)).body.some(function(e){return"VariableDeclaration"===e.type&&e.declarations.some(function(e){return"ArrayExpression"===e.init.type})&&e.declarations.some(function(e){return e.id.name===t})||"FunctionDeclaration"===e.type&&e.params.some(function(e){return"Identifier"===e.type&&e.name===t})&&e.body.body.some(function(e){return"VariableDeclaration"===e.type&&e.declarations.some(function(e){return"VariableDeclarator"===e.type&&"Identifier"===e.id.type&&e.id.name===innerJudgmentText&&"Literal"===e.init.type&&e.init.value===innerJudgmentText})})||"VariableDeclaration"===e.type&&e.declarations.some(function(e){return"ArrowFunctionExpression"===e.init.type&&e.init.params.some(function(e){return"Identifier"===e.type&&e.name===t})&&e.init.body.body.some(function(e){return"VariableDeclaration"===e.type&&e.declarations.some(function(e){return"VariableDeclarator"===e.type&&"Identifier"===e.id.type&&e.id.name===innerJudgmentText&&"Literal"===e.init.type&&e.init.value===innerJudgmentText})})})}))}catch(e){console.log(e)}}),o.length>0&&o.reduce(function(e,t){return e||t})},radix=function(e){return e.index?"Math.pow(".concat(_shape(e.body),",1/").concat(_shape(e.index.body),")"):"leftright"===e.body.body[0].type?"Math.sqrt".concat(_shape(e.body.body)):"Math.sqrt(".concat(_shape(e.body.body),")")},isVector=function isVector(input){var variable=[],variableArray=[],variableFunction=[],isVectorShape=function e(t){if(t&&0!==t.length)if(Array.isArray(t)||(t=[t]),Array.isArray(t[0]))t.forEach(function(t){e(t)});else switch(t[0].type){case"accent":var n=_shape(t[0].base.body);variableArray.push(n),t.length>1&&e(t.slice(1,t.length));break;case"mathord":for(var a=[],o=0,r=!1,c=0;c<t.length;c++)if("mathord"===t[c].type||"textord"===t[c].type)a.push(t[c]),o++;else{if("leftright"!==t[c].type)break;var i=_shape(a).split("*");if(!codeSearchFunction(code,i[i.length-1]))break;variable=variable.concat(i.slice(0,i.length-1)),variableFunction.push(i[i.length-1]),t.length>o&&e(t.slice(o,t.length)),r=!0}if(!r){var l=a.findIndex(function(e){return"\\pi"===e.text});if(-1!==l){if(0!==l){var u=_shape(a.slice(0,l)).split("*");variable=variable.concat(u)}t.length>l+1&&e(t.slice(l+1,t.length))}else{var s=_shape(a).split("*");variable=variable.concat(s),t.length>o&&e(t.slice(o,t.length))}}break;default:if(t[0].hasOwnProperty("body")&&e(t[0].body),t[0].hasOwnProperty("base")&&e(t[0].base),t[0].hasOwnProperty("sup")&&e(t[0].sup),t[0].hasOwnProperty("sub")&&e(t[0].sub),t[0].hasOwnProperty("denom")&&e(t[0].denom),t[0].hasOwnProperty("numer")&&e(t[0].numer),!(t.length>1))return;e(t.slice(1,t.length))}};isVectorShape(input),variable=variable.filter(function(e,t,n){return n.indexOf(e)===t}),variableArray=variableArray.filter(function(e,t,n){return n.indexOf(e)===t}),variableFunction=variableFunction.filter(function(e,t,n){return n.indexOf(e)===t});var str="";variable.forEach(function(e){/^\d*$/.test(e)||(str+="let ".concat(e,"=0;"))}),variableArray.forEach(function(e){/^\d*$/.test(e)||(str+="let ".concat(e,"=[];"))}),variableFunction.forEach(function(e){/^\d*$/.test(e)||(str+="let ".concat(e,"=()=>{};"))}),input[0]&&input[0].hasOwnProperty("type")&&"atom"===input[0].type&&(input=input.slice(1,input.length)),str+=_shape(input);try{return Array.isArray(eval(str))}catch(e){console.log(e)}},frac=function(e){return isVector(e.numer.body)?"".concat(_shape(e.numer.body),".map(e=>e/(").concat(_shape(e.denom.body),"))"):"((".concat(_shape(e.numer.body),")/(").concat(_shape(e.denom.body),"))")},pow=function(e){return"Math.pow(".concat("leftright"===e.base.type?_shape(e.base.body):_shape(e.base),",").concat("leftright"===e.sup.body[0].type?_shape(e.sup.body[0].body):_shape(e.sup.body),")")},sin=function(e){return e?"leftright"===e.type?"Math.sin".concat(_shape(e)):"Math.sin(".concat(_shape(e),")"):"sin"},cos=function(e){return e?"leftright"===e.type?"Math.cos".concat(_shape(e)):"Math.cos(".concat(_shape(e),")"):"cos"},tan=function(e){return e?"leftright"===e.type?"Math.tan".concat(_shape(e)):"Math.tan(".concat(_shape(e),")"):"tan"},leftright=function(e){return"["===e[0].left&&"]"===e[0].right?"Math.floor(".concat(_shape(e[0].body),")").concat(nextMulti(e,1)):"|"===e[0].left&&"|"===e[0].right?isVector(e[0].body)?"Math.sqrt(".concat(_shape(e[0].body),".reduce((pre,cur)=>pre+Math.pow(cur,2),0))s").concat(nextMulti(e,1)):"Math.abs(".concat(_shape(e[0].body),")").concat(nextMulti(e,1)):isVector(e.slice(1,e.length))?isVector([e[0]])?"".concat(_shape(e[0]),".reduce((pre,cur,num)=>pre+cur*").concat(_shape(e.slice(1,e.length)),"[num],0)"):"".concat(_shape(e.slice(1,e.length)),".map(e=>e*(").concat(_shape(e[0].body),"))"):"(".concat(_shape(e[0].body),")").concat(nextMulti(e,1))},naturalLog=function(e){return e?"leftright"===e.type?"Math.log".concat(_shape(e)):"Math.log(".concat(_shape(e),")"):"log"},log=function(e){if(!e)return"log";var t=_shape(e[0].sub.body),n=e[1];return"leftright"===n.type?"(Math.log".concat(_shape(n),"/Math.log(").concat(t,"))"):"(Math.log(".concat(_shape(n),")/Math.log(").concat(t,"))")},sum=function(e){var t=_shape(e.slice(1,e.length)),n=e[0].sub.body.findIndex(function(e){return"atom"===e.type&&"="===e.text}),a=_shape(e[0].sub.body.slice(0,n)),o=_shape(e[0].sub.body.slice(n+1,e[0].sub.body.length)),r=_shape(e[0].sup.body);return"((() => {\n        let result = 0;\n        for(let ".concat(a,"=").concat(o,";").concat(a,"<").concat(r,";").concat(a,"++){\n            result += ").concat(t,";\n        }\n        return result;\n    })())")},definiteIntegral=function(e,t){var n=_shape(e[0].sub.body),a=_shape(e[0].sup.body),o=_shape(e.slice(1,t)).replace(/Math\./g,""),r=_shape(e[t+1]);return"((".concat(r,"=>").concat(latex2js(atl(mathjs.integral(o,r).toString())),")(").concat(a,")-(").concat(r,"=>").concat(latex2js(atl(mathjs.integral(o,r).toString())),")(").concat(n,"))")},indefiniteIntegral=function(e,t){var n=_shape(e.slice(1,t)).replace(/Math\./g,""),a=_shape(e[t+1]);return"(".concat(latex2js(atl(mathjs.integral(n,a).toString())),")")},differential=function(e){var t=_shape(e.base).replace(/Math\./g,"").replace(/pow\((.*)\,(.*)\)/g,"$1^$2");return mathjs.derivative(t,"x").toString()},limit=function(e){var t=e[0].sub.body.findIndex(function(e){return"\\rightarrow"===e.value});return-1===t?"lim":"((".concat(_shape(e[0].sub.body.slice(0,t-1)),")=>").concat(_shape(e[1]),")(").concat(_shape(e[0].sub.body.slice(t,e[0].sub.body.length)),")")},matrix=function(e){return e?e.hasOwnProperty("type")?"textord"===e.type||"mathord"===e.type?e.text:e.body[0].body.map(function(e){return e.map(function(e){return _shape(e)})}):e:[]},dot=function(e,t){var n="";return e.forEach(function(e,a){n+="+".concat(e,"*").concat(t[a])}),n=n.slice(1,n.length),"(".concat(n,")")},matrixMultiplication=function(e,t){return(t="accent"!==t.type||"\\vec"!==t.label&&"\\overrightarrow"!==t.label?[matrix(t)]:[function(){for(var n=[],a=0;a<e.length;a++)n.push(["".concat(_shape(t.base.body),"[").concat(a,"]")]);return n}()]).unshift(e),Array.isArray(t[0])?1===t[0][0].length&&1===t[1][0].length?dot(t[0],t[1]):function(e){var t=[];return e[0].forEach(function(n,a){for(var o=[],r=function(t){var a="",r=0;n.forEach(function(n,o){a+="+".concat(n,"*").concat(e[1][r][t]),r++}),a="("+a.slice(1,a.length)+")",o.push(a)},c=0;c<e[1][0].length;c++)r(c);t.push(o)}),t}(t):""===t[0]?t[1]:t[1].map(function(e){return Array.isArray(e)?e.map(function(e){return"(".concat(t[0],"*").concat(e,")")}):"(".concat(t[0],"*").concat(e,")")})},matrixOperations=function(e,t,n){if(Array.isArray(e)){if("accent"!==t.type||"\\vec"!==t.label&&"\\overrightarrow"!==t.label){if(Array.isArray(e[0])){var a=[];return e.forEach(function(e,o){var r=[];e.forEach(function(e,a){r.push(e+n+t[o][a])}),a.push(r)}),a}var o=[];return e.forEach(function(e,a){o.push(e+n+t[a])}),o}var r=[];return e.forEach(function(e,a){r.push(e+n+"".concat(_shape(t.base.body),"[").concat(a,"]"))}),r}return e+n+t};var matrixCalculation=function e(t,n){var a="";if(0===n.length)return t;switch(n[0].type){case"accent":var o=matrix(n.find(function(e){return"leftright"===e.type&&"array"===e.body[0].type})).length;a=n.length>1?e(matrixMultiplication(t,function(){for(var e=[],t=0;t<o;t++)e.push(["".concat(_shape(n[0].base.body),"[").concat(t,"]")]);return e}()),n.slice(1,n.length)):matrixMultiplication(t,n[0]);break;case"leftright":a=n.length>1?e(matrixMultiplication(t,n[0]),n.slice(1,n.length)):matrixMultiplication(t,n[0]);break;case"atom":switch(n[0].text){case"\\cdot":case"\\times":a=n.length>2?e(matrixMultiplication(t,n[1]),n.slice(2,n.length)):matrixMultiplication(t,n[1]);break;default:a=function(){var a=n.slice(1,n.length).findIndex(function(e,t,n){return"atom"===e.type&&"\\cdot"===e.text});return 2===(a=-1===a?n.length:a)?n.length>2?"accent"===n[1].type?e(matrixOperations(t,n[1],n[0].text),n.slice(2,n.length)):e(matrixOperations(t,matrix(n[1]),n[0].text),n.slice(2,n.length)):"accent"===n[1].type?matrixOperations(t,n[1],n[0].text):matrixOperations(t,matrix(n[1]),n[0].text):n.length>a?e(matrixOperations(t,e(t,n.slice(1,a)),n[0].text),n.slice(a,n.length)):matrixOperations(t,e(t,n.slice(1,a)),n[0].text)}()}break;default:var r=n.findIndex(function(e){return"accent"===e.type&&("\\vec"===e.label||"\\overrightarrow"===e.label)});if(-1===r){var c=n.findIndex(function(e){return"leftright"===e.type&&"array"===e.body[0].type});a=e(_shape(n.slice(0,c)),n.slice(c,n.length))}else{var i=n.slice(0,r).findIndex(function(e){return"leftright"===e.type&&"array"===e.body[0].type});a=-1===i?function(){if(Array.isArray(t))return e(matrixMultiplication(_shape(n.slice(0,r)),function(){for(var e=[],a=0;a<t.length;a++)e.push(["".concat(_shape(n[r]),"[").concat(a,"]")]);return e}()),n.slice(r+1,n.length));var a=matrix(n.find(function(e){return"leftright"===e.type&&"array"===e.body[0].type})).length;return e(matrixMultiplication(_shape(n.slice(0,r)),function(){for(var e=[],t=0;t<a;t++)e.push(["".concat(_shape(n[r]),"[").concat(t,"]")]);return e}()),n.slice(r+1,n.length))}():e(_shape(n.slice(0,i)),n.slice(i,n.length))}}return a};_matrixLeftRightShape=function(e){if(e.some(function(e){return"atom"===e.type&&"="===e.text}))return _shape(e);var t=e.findIndex(function(e,t,n){var a=n.slice(t+1,n.length).findIndex(function(e){return"atom"===e.type});if(a=-1===a?n.length:a+t+1,n.slice(t,a).some(function(e){return"leftright"===e.type&&"array"===e.body[0].type||"accent"===e.type&&("\\vec"===e.label||"\\overrightarrow"===e.label)}))return!0});if(-1===t)return _shape(e);var n,a,o=e.slice(t,e.length).findIndex(function(e,t,n){return!function(){var e=n.slice(t+1,n.length).findIndex(function(e){return"atom"===e.type});if(e=-1===e?n.length:e+t+1,n.slice(t,e).some(function(e){return"leftright"===e.type&&"array"===e.body[0].type||"accent"===e.type&&("\\vec"===e.label||"\\overrightarrow"===e.label)}))return!0}()});return-1===o?Array.isArray(matrixCalculation(_shape(e.slice(0,t)),e.slice(t,e.length)))?(n=e.slice(0,t).reverse().find(function(e){return"atom"===e.type&&"="===e.text}),a=e.slice(0,t).findIndex(function(e){return e===n})+1,"".concat(_shape(e.slice(0,a)),"[").concat(matrixCalculation(_shape(e.slice(a,t)),e.slice(t,e.length)),"]")):function(){var n=e.slice(0,t).reverse().find(function(e){return"atom"===e.type}),a=e.slice(0,t).findIndex(function(e){return e===n})+1;return"".concat(_shape(e.slice(0,a))).concat(matrixCalculation(_shape(e.slice(a,t)),e.slice(t,e.length)))}():"".concat(function(){var n=e.slice(0,t).reverse().find(function(e){return"atom"===e.type}),a=e.slice(0,t).findIndex(function(e){return e===n})+1;return"".concat(_shape(e.slice(0,a))).concat(matrixCalculation(_shape(e.slice(a,t)),e.slice(t,o+t)))}()).concat(e.slice(o+t,e.length).some(function(e){return"leftright"===e.type&&"array"===e.body[0].type})?_matrixLeftRightShape(e.slice(o+t,e.length)):_shape(e.slice(o+t,e.length)))},_vecShape=function(e){var t,n,a,o,r,c="";switch(e[0].type){case"accent":e.length>1&&"accent"===e[1].type?(n=_shape(e[1].base.body),a="pre"===n.split(".")[0]?"pre1":"pre",o="cur"===n.split(".")[0]?"cur1":"cur",r="i"===n.split(".")[0]?"i1":"i",c="".concat(_shape(e[0].base.body),".reduce((").concat(a,",").concat(o,",").concat(r,")=>").concat(a,"+").concat(o,"*").concat(n,"[").concat(r,"],0)").concat(e.length>2?_vecShape(e.slice(2,e.length)):"")):c=e.length>1&&"leftright"===e[1].type&&"array"===e[1].type?function(){var t=_matrixLeftRightShape(e[1]),n="pre"===t.split(".")[0]?"pre1":"pre",a="cur"===t.split(".")[0]?"cur1":"cur",o="i"===t.split(".")[0]?"i1":"i";return"".concat(_shape(e[0].base.body),".reduce((").concat(n,",").concat(a,",").concat(o,")=>").concat(n,"+").concat(a,"*").concat(t,"[").concat(o,"],0)").concat(e.length>2?_vecShape(e.slice(2,e.length)):"")}():e.length>2&&"atom"===e[1].type&&"\\cdot"===e[1].text&&"accent"===e[2].type?function(){var t=_shape(e[2].base.body),n="pre"===t.split(".")[0]?"pre1":"pre",a="cur"===t.split(".")[0]?"cur1":"cur",o="i"===t.split(".")[0]?"i1":"i";return"".concat(_shape(e[0].base.body),".reduce((").concat(n,",").concat(a,",").concat(o,")=>").concat(n,"+").concat(a,"*").concat(t,"[").concat(o,"],0)").concat(e.length>3?_vecShape(e.slice(3,e.length)):"")}():e.length>2&&"atom"===e[1].type&&"\\cdot"===e[1].text&&"leftright"===e[2].type&&"array"===e[2].type?function(){var t=_matrixLeftRightShape(e[2]),n="pre"===t.split(".")[0]?"pre1":"pre",a="cur"===t.split(".")[0]?"cur1":"cur",o="i"===t.split(".")[0]?"i1":"i";return"".concat(_shape(e[0].base.body),".reduce((").concat(n,",").concat(a,",").concat(o,")=>").concat(n,"+").concat(a,"*").concat(t,"[").concat(o,"],0)").concat(e.length>3?_vecShape(e.slice(3,e.length)):"")}():"".concat(_shape(e[0].base.body)).concat(e.length>1?_vecShape(e.slice(1,e.length)):"");break;case"atom":e[0].text,c=function(){var t,n,a,o=e.findIndex(function(e){return"accent"===e.type});return e.length>o+1&&"accent"===e[o+1].type?"".concat(_shape(e[0])).concat(_vecShape(e.slice(1,o+2))).concat(e.length>o+2?_vecShape(e.slice(o+2,e.length)):""):e.length>o+2&&"atom"===e[o+1].type&&"\\cdot"===e[o+1].text&&"accent"===e[o+2].type?"".concat(_shape(e[0])).concat(_vecShape(e.slice(1,o+3))).concat(e.length>o+3?_vecShape(e.slice(o+3,e.length)):""):(t=_vecShape(e.slice(1,o+1)),n="e"===t.split(".")[0]?"e1":"e",a="i"===t.split(".")[0]?"i1":"i",".map((".concat(n,",").concat(a,")=>").concat(n).concat(_shape(e[0])).concat(t,"[").concat(a,"])").concat(e.length>o+1?_vecShape(e.slice(o+1,e.length)):""))}();break;default:t=e.findIndex(function(e){return"accent"===e.type}),c=e.length>t+1&&"accent"===e[t+1].type?"".concat(_shape(e.slice(0,t))).concat("atom"!==e[t-1].type?"*":"").concat(_vecShape(e.slice(t,t+2))).concat(e.length>t+2?_vecShape(e.slice(t+2,e.length)):""):e.length>t+2&&"atom"===e[t+1].type&&"\\cdot"===e[t+1].text&&"accent"===e[t+2].type?"".concat(_shape(e.slice(0,t))).concat("atom"!==e[t-1].type?"*":"").concat(_vecShape(e.slice(t,t+3))).concat(e.length>t+3?_vecShape(e.slice(t+3,e.length)):""):"".concat(_vecShape([e[t]]),".map(e=>").concat(_shape(e.slice(0,t))).concat("atom"!==e[t-1].type?"*":"","e)").concat(e.length>t+1?_vecShape(e.slice(t+1,e.length)):"")}return c},nextMulti=function(e,t){return e.length>t?("atom"===e[t].type||"punct"===e[t].type||"bin"===e[t].type||"spacing"===e[t].type||"textord"===e[t].type&&"/"===e[t].text?"":"*")+_shape(e.slice(t,e.length)):""},_shape=function(e){var t;if(!Array.isArray(e))switch(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(e)){case"object":e=[e];break;case"string":return e}if(e.some(function(e){return"atom"===e.type&&"="===e.text})){var n=e.findIndex(function(e){return"atom"===e.type&&"="===e.text}),a="accent"!==e[0].type||"\\vec"!==e[0].label&&"\\overrightarrow"!==e[0].label?e.slice(0,n):e[0].base.body,o=a.findIndex(function(e){return"leftright"===e.type&&"["===e.left&&"]"===e.right});if("supsub"===a[a.length-1].type&&a[a.length-1].hasOwnProperty("base")&&a[a.length-1].hasOwnProperty("sub")){var r=a.slice(0,a.length-1).reduce(function(e,t){return t.hasOwnProperty("text")?e+t.text:t.hasOwnProperty("name")?e+t.name.replace("\\",""):void 0},"")+_shape(a[a.length-1].base),c="[".concat(_shape(a[a.length-1].sub.body),"]");return c=c.replace(/,/g,"]["),codeSearchArray(code,r),"".concat(r).concat(c,"=").concat(_shape(e.slice(n+1,e.length)))}if("leftright"===a[a.length-1].type&&"("===a[a.length-1].left&&")"===a[a.length-1].right){var i=a.slice(0,a.length-1).reduce(function(e,t){return t.hasOwnProperty("text")?e+t.text:t.hasOwnProperty("name")?e+t.name.replace("\\",""):void 0},""),l=a[a.length-1].body.reduce(function(e,t){return t.hasOwnProperty("text")?e+t.text:t.hasOwnProperty("name")?e+t.name.replace("\\",""):void 0},""),u=code.match(/\/\*\d+\*\//)[0];return code=code.replace(u,"function ".concat(i,"(").concat(l,"){\n       ").concat(u,"\n     }")),"function ".concat(i,"(").concat(l,"){\n                 return ").concat(_shape(e.slice(n+1,e.length)),";\n              }")}if(-1===o){var s=a.reduce(function(e,t){return t.hasOwnProperty("text")?e+t.text:t.hasOwnProperty("name")?e+t.name.replace("\\",""):void 0},"");return codeSearchVariable(code,s)?"".concat(s,"=").concat(_shape(e.slice(n+1,e.length))):"let ".concat(s,"=").concat(_shape(e.slice(n+1,e.length)))}var d=a.slice(0,o).reduce(function(e,t){return t.hasOwnProperty("text")?e+t.text:t.hasOwnProperty("name")?e+t.name.replace("\\",""):void 0},""),p=a.slice(o,a.length).reduce(function(e,t){return"leftright"===t.type&&"["===t.left&&"]"===t.right?"".concat(e,"[").concat(_shape(t.body),"]"):e},"");return codeSearchArray(code,d),"".concat(d).concat(p,"=").concat(_shape(e.slice(n+1,e.length)))}if(e.some(function(e){return"leftright"===e.type&&"array"===e.body[0].type}))return _matrixLeftRightShape(e);if(e.some(function(e){return"accent"===e.type&&("\\vec"===e.label||"\\overrightarrow"===e.label)}))return _vecShape(e);if(!e[0])return"";switch(e[0].type){case"textord":t=e.length>1?isVector(e.slice(1,e.length))?"".concat(_shape(e.slice(1,e.length)),".map(e=>e*").concat("\\infty"===e[0].text?1/0:e[0].text,")"):"".concat("\\infty"===e[0].text?1/0:e[0].text).concat(("textord"!==e[1].type&&"atom"!==e[1].type&&"bin"!==e[1].type&&"spacing"!==e[1].type&&"/"!==e[0].text?"*":"")+_shape(e.slice(1,e.length))):"\\infty"===e[0].text?"Infinity":e[0].text;break;case"mathord":t=function(){if(e.length>1){for(var t=e.findIndex(function(e,t,n){return"mathord"!==e.type&&"textord"!==e.type&&!("supsub"==e.type&&e.sub&&e.base&&("mathord"===e.base.type||"textord"===e.base.type))||t>0&&"supsub"==n[t-1].type&&n[t-1].sub&&n[t-1].base&&("mathord"===n[t-1].base.type||"textord"===n[t-1].base.type)}),n="",a=t=-1===t?e.length:t;a>0;a--){var o=e.slice(0,a).reduce(function(e,t){return e+("supsub"===t.type?t.base.text:t.text)},"");if(codeSearchVariable(code,o)){n="".concat(o).concat(a<t?"*"+_shape(e.slice(a,t)):"");break}}return 0===n.length?"leftright"===e[1].type&&"["===e[1].left&&"]"===e[1].right?"".concat("\\pi"===e[0].text?"Math.PI":e[0].text).concat(function(){var t=e.slice(1,e.length).findIndex(function(e){return!("leftright"===e.type&&"["===e.left&&"]"===e.right)});if(t=-1===t?e.length-1:t,codeSearchArray(code,e[0].text)){var n=e.slice(1,t+1).map(function(e){return"[".concat(_shape(e.body),"]")});return"".concat(n.reduce(function(e,t){return e+t})).concat(nextMulti(e,t+1))}var a=e.slice(1,t+1).map(function(e){return"Math.floor(".concat(_shape(e.body),")")});return"*".concat(a.reduce(function(e,t){return e+"*"+t})).concat(nextMulti(e,t+1))}()):isVector(e.slice(1,e.length))?"".concat(_shape(e.slice(1,e.length)),".map(e=>{\n                    return e*").concat("\\pi"===e[0].text?"Math.PI":e[0].text,";\n                  })"):"".concat("\\pi"===e[0].text?"Math.PI":e[0].text).concat(("atom"===e[1].type||"punct"===e[1].type||"bin"===e[1].type||"spacing"===e[1].type||"leftright"===e[1].type&&codeSearchFunction(code,e[0].text)?"":"*")+_shape(e.slice(1,e.length))):e.length===t?"supsub"===e[e.length-1].type&&e[e.length-1].sub&&e[e.length-1].base&&("mathord"===e[e.length-1].base.type||"textord"===e[e.length-1].base.type)?("[".concat(_shape(e[e.length-1].sub.body),"]").replace(/,/g,"]["),codeSearchArray(code,n),"".concat(n)):n:function(){return"leftright"===e[t].type&&"["===e[t].left&&"]"===e[t].right?"".concat("supsub"===e[t-1].type&&e[t-1].sub&&e[t-1].base&&("mathord"===e[t-1].base.type||"textord"===e[t-1].base.type)?(a="[".concat(_shape(e[t-1].sub.body),"]"),a=a.replace(/,/g,"]["),codeSearchArray(code,n),"".concat(n)):n).concat(function(){var a=e.slice(t,e.length).findIndex(function(e){return!("leftright"===e.type&&"["===e.left&&"]"===e.right)});if(a=-1===a?e.length-1:a,codeSearchArray(code,n)){var o=e.slice(t,t+a).map(function(e){return"[".concat(_shape(e.body),"]")});return"".concat(o.reduce(function(e,t){return e+t})).concat(nextMulti(e,t+a))}var r=e.slice(t,t+a).map(function(e){return"Math.floor(".concat(_shape(e.body),")")});return"*".concat(r.reduce(function(e,t){return e+"*"+t})).concat(nextMulti(e,t+a))}()):isVector(e.slice(t,e.length))?"".concat(_shape(e.slice(t,e.length)),".map(e=>e*").concat("supsub"===e[t-1].type&&e[t-1].sub&&e[t-1].base&&("mathord"===e[t-1].base.type||"textord"===e[t-1].base.type)?function(){var a="[".concat(_shape(e[t-1].sub.body),"]");return a=a.replace(/,/g,"]["),codeSearchArray(code,n),"".concat(n)}():n,")"):"".concat("supsub"===e[t-1].type&&e[t-1].sub&&e[t-1].base&&("mathord"===e[t-1].base.type||"textord"===e[t-1].base.type)?function(){var a="[".concat(_shape(e[t-1].sub.body),"]");return a=a.replace(/,/g,"]["),codeSearchArray(code,n),"".concat(n)}():n).concat(("atom"===e[t].type||"punct"===e[t].type||"bin"===e[t].type||"spacing"===e[t].type||"leftright"===e[t].type&&codeSearchFunction(code,n)?"":"*")+_shape(e.slice(t,e.length)));var a}()}return"\\pi"===e[0].text?"Math.PI":e[0].text}();break;case"spacing":t="],[".concat(e.length>1?_shape(e.slice(1,e.length)):"");break;case"styling":t=_shape(e[0].body);break;case"atom":switch(e[0].text){case"\\cdot":case"\\times":t="*";break;case"\\div":t="/";break;default:t=e[0].text}t+=e.length>1?_shape(e.slice(1,e.length)):"";break;case"punct":t="".concat(e[0].value).concat(e.length>1?_shape(e.slice(1,e.length)):"");break;case"ordgroup":t="".concat(_shape(e[0].body)).concat(nextMulti(e,1));break;case"sqrt":t=isVector(e.slice(1,e.length))?"".concat(_shape(e.slice(1,e.length)),".map(e=>e*").concat(radix(e[0]),")"):"".concat(radix(e[0])).concat(nextMulti(e,1));break;case"leftright":t=leftright(e);break;case"array":e=e[0].body[0][0].body[0].body,t=_matrixLeftRightShape(e);break;case"genfrac":t=isVector(e.slice(1,e.length))?"".concat(_shape(e.slice(1,e.length)),".map(e=>e*").concat(frac(e[0]),")"):"".concat(frac(e[0])).concat(nextMulti(e,1));break;case"bin":switch(e[0].value){case"\\cdot":t="*".concat(_shape(e.slice(1,e.length)));break;default:t="".concat(e[0].value).concat(nextMulti(e,1))}break;case"op":switch(e[0].name){case"\\sin":t=isVector(e.slice(2,e.length))?"".concat(_shape(e.slice(2,e.length)),".map(e=>e*").concat(sin(e[1]),")"):"".concat(sin(e[1])).concat(nextMulti(e,2));break;case"\\cos":t=isVector(e.slice(2,e.length))?"".concat(_shape(e.slice(2,e.length)),".map(e=>e*").concat(cos(e[1]),")"):"".concat(cos(e[1])).concat(nextMulti(e,2));break;case"\\tan":t=isVector(e.slice(2,e.length))?"".concat(_shape(e.slice(2,e.length)),".map(e=>e*").concat(tan(e[1]),")"):"".concat(tan(e[1])).concat(nextMulti(e,2));break;case"\\log":t=isVector(e.slice(2,e.length))?"".concat(_shape(e.slice(2,e.length)),".map(e=>e*").concat(naturalLog(e[1]),")"):"".concat(naturalLog(e[1])).concat(nextMulti(e,2));break;case"\\int":var h=e.findIndex(function(e){return"mathord"===e.type&&"d"===e.text});t=isVector(e.slice(h+2,e.length))?"".concat(_shape(e.slice(h+2,e.length)),".map(e=>e*").concat(indefiniteIntegral(e,h),")"):"".concat(indefiniteIntegral(e,h)).concat(nextMulti(e,2))}break;case"supsub":if(e[0].sub)switch(e[0].base.name){case"\\log":t=isVector(e.slice(2,e.length))?"".concat(_shape(e.slice(2,e.length)),".map(e=>e*").concat(log(e),")"):"".concat(log(e)).concat(nextMulti(e,2));break;case"\\sum":t=isVector(e.slice(2,e.length))?"".concat(_shape(e.slice(2,e.length)),".map(e=>e*").concat(sum(e),")"):"".concat(sum(e)).concat(nextMulti(e,2));break;case"\\int":var m=e.findIndex(function(e){return"mathord"===e.type&&"d"===e.text});t=isVector(e.slice(m+2,e.length))?"".concat(_shape(e.slice(m+2,e.length)),".map(e=>e*").concat(definiteIntegral(e,m),")"):"".concat(definiteIntegral(e,m)).concat(nextMulti(e,2));break;case"\\lim":t=isVector(e.slice(2,e.length))?"".concat(_shape(e.slice(2,e.length)),".map(e=>e*").concat(limit(e),")"):"".concat(limit(e)).concat(nextMulti(e,2));break;default:var g="[".concat(_shape(e[0].sub.body),"]");g=g.replace(/,/g,"]["),t=isVector(e.slice(1,e.length))?"".concat(_shape(e.slice(1,e.length)),".map(e=>e*").concat(_shape(e[0].base)).concat(g,")"):"".concat(_shape(e[0].base)).concat(g).concat(nextMulti(e,1))}else t="\\prime"===e[0].sup.body[0].text?isVector(e.slice(1,e.length))?"".concat(_shape(e.slice(1,e.length)),".map(e=>e*").concat(differential(e[0]),")"):"".concat(differential(e[0])).concat(nextMulti(e,1)):isVector(e.slice(1,e.length))?"".concat(_shape(e.slice(1,e.length)),".map(e=>e*").concat(pow(e[0]),")"):"".concat(pow(e[0])).concat(nextMulti(e,1));break;default:t="".concat(e[0]).concat(nextMulti(e,1))}return t},__webpack_exports__.a=latex2js=function(e,t){for(code=t;e.search(/\n/)>=0;)e=e.replace(/\n/g," ");var n=katex.__parse(e);return console.log(n),_shape(n,code)}},71:function(e,t,n){"use strict";n.r(t);var a,o,r,c,i,l,u,s,d,p,h,m,g,f,v,y,b,x,F,A,k,E,S,w,M,C,T,R,W,L,H,B,O,D=n(2),I=n.n(D),P=n(3),z=n.n(P),V=n(4),U=n.n(V),N=n(5),_=n.n(N),j=n(6),$=n.n(j),Y=n(345),X=n.n(Y),q=n(0),K=n.n(q),G=n(15),Z=n(105),Q=Object(G.b)(function(e){var t=e.state;return{updateRunButton:t.updateRunButton,updateActiveText:t.updateActiveText,editor:t.editor,updateRunAreaRenderingFlag:t.updateRunAreaRenderingFlag,updateRunButtonColor:t.updateRunButtonColor,iframeElement:t.iframeElement,runButtonColorBackgroundColor:t.runButtonColor.backgroundColor,runButtonColorFontColor:t.runButtonColor.fontColor}})(a=Object(G.c)(a=function(e){function t(){var e,n;I()(this,t);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(n=U()(this,(e=_()(t)).call.apply(e,[this].concat(o)))).handleClick=function(){var e=n.props.editor.getValue();n.props.updateActiveText(e),n.props.updateRunAreaRenderingFlag(!0)},n.handleMouseEnter=function(){n.props.updateRunButtonColor({backgroundColor:" rgb(0, 185, 158)",fontColor:"#eee"})},n.handleMouseLeave=function(){n.props.iframeElement||n.props.updateRunButtonColor({backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"})},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){this.props.updateRunButton(this.refs.runButton)}},{key:"render",value:function(){return K.a.createElement("button",{"touch-action":"auto",ref:"runButton",style:{backgroundColor:this.props.runButtonColorBackgroundColor,color:this.props.runButtonColorFontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},K.a.createElement(Z.FaPlay,null))}}]),t}(K.a.Component))||a)||a,J=Object(G.b)(function(e){var t=e.state;return{updateStopButton:t.updateStopButton,editor:t.editor,updateActiveText:t.updateActiveText,updateRunAreaRenderingFlag:t.updateRunAreaRenderingFlag,updateRunButtonColor:t.updateRunButtonColor,updateIframeElement:t.updateIframeElement,updateHotReload:t.updateHotReload}})(o=Object(G.c)(o=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(){n.props.updateActiveText(n.props.editor.getValue()),n.props.updateRunAreaRenderingFlag(!1),n.props.updateRunButtonColor({backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"}),n.props.updateIframeElement(null),n.props.updateHotReload(!1)},n.handleMouseEnter=function(){n.setState({backgroundColor:" rgb(0, 185, 158)",fontColor:"#eee"})},n.handleMouseLeave=function(){n.setState({backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"})},n.state={backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){this.props.updateStopButton(this.refs.stopButton)}},{key:"render",value:function(){return K.a.createElement("button",{"touch-action":"auto",ref:"stopButton",style:{backgroundColor:this.state.backgroundColor,color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},K.a.createElement(Z.FaSquare,null))}}]),t}(K.a.Component))||o)||o,ee=Object(G.b)(function(e){var t=e.state;return{activeTextFileType:t.activeTextFile.type,editor:t.editor,activeTextFileHandWritingFormulaAreaId:t.activeTextFile.handWritingFormulaAreaId,incrementHandWritingFormulaAreaId:t.incrementHandWritingFormulaAreaId,pushHandWritingFormulaAreas:t.pushHandWritingFormulaAreas}})(r=Object(G.c)(r=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(){if("javascript"===n.props.activeTextFileType||"glsl"===n.props.activeTextFileType){var e=n.props.editor,t=e.getSelectionRange().start,a=e.renderer.textToScreenCoordinates(t),o=n.props.activeTextFileHandWritingFormulaAreaId;n.props.incrementHandWritingFormulaAreaId();for(var r=e.renderer.pixelToScreenCoordinates(a.pageX+n.width,a.pageY+n.height),c=r.column-t.column,i=r.row-t.row,l="/*".concat(o,"*/"),u=c-l.length,s=0;s<u;s++)l+=" ";for(var d=0;d<i;d++){l+="\n";for(var p=0;p<t.column+c;p++)l+=" "}e.insert(l),n.props.pushHandWritingFormulaAreas({width:n.width,height:n.height,x:a.pageX,y:a.pageY,backgroundWord:l,visible:!0,code:"",exchange:!1,codeEditor:null,handWritingFormulaEditor:null,glslResultCounter:0,resultVariable:"",model:{},resizeEvent:!1})}},n.handleMouseEnter=function(){n.setState({backgroundColor:" rgb(0, 185, 158)",fontColor:"#eee"})},n.handleMouseLeave=function(){n.setState({backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"})},n.width=500,n.height=320,n.state={backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{"touch-action":"auto",style:{backgroundColor:this.state.backgroundColor,color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},K.a.createElement(Z.FaPencilAlt,null))}}]),t}(K.a.Component))||r)||r,te=(Object(G.b)(function(e){var t=e.state;return{updateListButton:t.updateListButton,updateListButtonColor:t.updateListButtonColor,listButtonColorBackgroundColor:t.listButtonColor.backgroundColor,listButtonColorFontColor:t.listButtonColor.fontColor,updateListAreaRenderingFlag:t.updateListAreaRenderingFlag,listAreaRenderingFlag:t.listAreaRenderingFlag}})(c=Object(G.c)(c=function(e){function t(){var e,n;I()(this,t);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(n=U()(this,(e=_()(t)).call.apply(e,[this].concat(o)))).handleClick=function(){n.props.listAreaRenderingFlag?n.props.updateListAreaRenderingFlag(!1):n.props.updateListAreaRenderingFlag(!0)},n.handleMouseEnter=function(){n.props.updateListButtonColor({backgroundColor:" rgb(0, 185, 158)",fontColor:"#eee"})},n.handleMouseLeave=function(){n.props.listAreaRenderingFlag||n.props.updateListButtonColor({backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"})},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){this.props.updateListButton(this.refs.listButton)}},{key:"render",value:function(){return K.a.createElement("button",{"touch-action":"auto",ref:"listButton",style:{backgroundColor:this.props.listButtonColorBackgroundColor,color:this.props.listButtonColorFontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},K.a.createElement(Z.FaList,null))}}]),t}(K.a.Component))||c),Object(G.b)(function(e){var t=e.state;return{updateRecycleButton:t.updateRecycleButton,updateRecycleButtonColor:t.updateRecycleButtonColor,recycleButtonColorBackgroundColor:t.recycleButtonColor.backgroundColor,recycleButtonColorFontColor:t.recycleButtonColor.fontColor,editor:t.editor,textFileHandWritingFormulaAreas:t.activeTextFile.handWritingFormulaAreas}})(i=Object(G.c)(i=function(e){function t(){var e,n;I()(this,t);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(n=U()(this,(e=_()(t)).call.apply(e,[this].concat(o)))).handleClick=function(){var e=n.props.editor.getSelectionRange(),t=n.props.editor.session.getTextRange(e),a=n.props.textFileHandWritingFormulaAreas.find(function(e){return!e.visible&&e.code===t}),o=void 0!==a?a.backgroundWord:t;n.props.editor.insert(o)},n.handleMouseEnter=function(){n.props.updateRecycleButtonColor({backgroundColor:" rgb(0, 185, 158)",fontColor:"#eee"})},n.handleMouseLeave=function(){n.props.updateRecycleButtonColor({backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"})},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){this.props.updateRecycleButton(this.refs.recycleButton)}},{key:"render",value:function(){return K.a.createElement("button",{"touch-action":"auto",ref:"recycleButton",style:{backgroundColor:this.props.recycleButtonColorBackgroundColor,color:this.props.recycleButtonColorFontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},K.a.createElement(Z.FaRecycle,null))}}]),t}(K.a.Component))||i),function(e){function t(){return I()(this,t),U()(this,_()(t).apply(this,arguments))}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("div",{id:"runAndStop"},K.a.createElement(Q,null),K.a.createElement(J,null),K.a.createElement(ee,null))}}]),t}(K.a.Component)),ne=n(208),ae=n.n(ne),oe=(n(355),n(216),n(217),n(357),n(358),n(359),n(360),n(361),n(362),n(363),Object(G.b)(function(e){var t=e.state;return{updateEditor:t.updateEditor,updateHandWritingFormulaAreaAnchor:t.updateHandWritingFormulaAreaAnchor,updateHandWritingFormulaAreaVisible:t.updateHandWritingFormulaAreaVisible,hotReload:t.hotReload,updateActiveText:t.updateActiveText,executeHTML:t.executeHTML,textFile:t.textFile,editorValue:t.activeTextFile.text,activeTextFileType:t.activeTextFile.type,activeTextFileId:t.activeTextFileId,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,saveEvent:t.saveEvent}})(l=Object(G.c)(l=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleResize=function(){n.setState({width:window.innerWidth,height:window.innerHeight-110}),n.editor.resize()},n.componentDidMount=function(){var e=n.refs.aceEditor.editor;n.editor=e,e.resize(),n.props.updateEditor(e),e.session.$undoManager.reset(),n.keyboardHandler=e.getKeyboardHandler(),n.keyboardHandler.addCommand({name:"save-event",bindKey:{win:"Ctrl+s",mac:"Command+s"},exec:function(){try{console.log("saveEvent"),n.props.saveEvent()}catch(e){console.log(e)}},readOnly:!0}),window.addEventListener("resize",n.handleResize)},n.handleChange=function(e){n.props.updateActiveText(e),n.props.textFile.forEach(function(e,t){e.handWritingFormulaAreas.forEach(function(e,a){if(t===n.props.activeTextFileId){var o="/*".concat(a,"*/");n.editor.$search.setOptions({needle:o,regExp:!1});var r=n.editor.$search.find(n.editor.session);if(r){var c=n.editor.renderer.textToScreenCoordinates(r.start);c.pageY+e.height>0&&c.pageY<window.innerHeight+100&&(n.props.updateHandWritingFormulaAreaAnchor(a,c.pageX,c.pageY),n.props.updateHandWritingFormulaAreaVisible(t,a,!0))}else e.resizeEvent?n.props.updateHandWritingFormulaAreaVisible(t,a,!0):n.props.updateHandWritingFormulaAreaVisible(t,a,!1)}else n.props.updateHandWritingFormulaAreaVisible(t,a,!1)})}),n.props.hotReload&&(n.props.updateActiveText(e),n.props.executeHTML(n.props.textFile))},n.handleScroll=function(){n.props.textFile.forEach(function(e,t){e.handWritingFormulaAreas.forEach(function(e,a){if(t===n.props.activeTextFileId){var o="/*".concat(a,"*/");n.editor.$search.setOptions({needle:o,regExp:!1});var r=n.editor.$search.find(n.editor.session);if(r){var c=n.editor.renderer.textToScreenCoordinates(r.start);c.pageY+e.height>0&&c.pageY<window.innerHeight+100&&(n.props.updateHandWritingFormulaAreaAnchor(a,c.pageX,c.pageY),n.props.updateHandWritingFormulaAreaVisible(t,a,!0))}else n.props.updateHandWritingFormulaAreaVisible(t,a,!1)}else n.props.updateHandWritingFormulaAreaVisible(t,a,!1)})})},n.state={width:window.innerWidth,height:window.innerHeight-110},n}return $()(t,e),z()(t,[{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.handleResize)}},{key:"render",value:function(){return K.a.createElement(ae.a,{style:{position:"absolute",top:110,width:this.state.width,height:this.state.height},ref:"aceEditor",mode:this.props.activeTextFileType,theme:"dawn",onChange:this.handleChange,onScroll:this.handleScroll,value:this.props.editorValue,fontSize:27,editorProps:{$blockScrolling:1/0},wrapEnabled:!1,tabSize:4,setOptions:{hScrollBarAlwaysVisible:!0,vScrollBarAlwaysVisible:!0,animatedScroll:!0,scrollSpeed:.7,enableBasicAutocompletion:!0,enableSnippets:!0,enableLiveAutocompletion:!0}})}}]),t}(K.a.Component))||l)||l),re=n(13),ce=n.n(re),ie=n(16),le=n.n(ie),ue=Object(G.b)(function(e){var t=e.state;return{iframeElement:t.iframeElement,runAreaPosition:t.runAreaPosition,updateRunAreaPosition:t.updateRunAreaPosition}})(u=Object(G.c)(u=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleMouseAndTouchDown=function(e){document.body.addEventListener("mousemove",n.handleMouseAndTouchMove),document.body.addEventListener("touchmove",n.handleMouseAndTouchMove),document.body.addEventListener("mouseup",n.handleMouseAndTouchUp),document.body.addEventListener("touchend",n.handleMouseAndTouchUp);var t=n.props.iframeElement;t.contentDocument.addEventListener("mousemove",n.handleIframeMouseAndTouchMove),t.contentDocument.addEventListener("touchmove",n.handleIframeMouseAndTouchMove),t.contentDocument.addEventListener("mouseup",n.handleMouseAndTouchUp),t.contentDocument.addEventListener("touchend",n.handleMouseAndTouchUp),n.setState({x:"changedTouches"in e?e.changedTouches[0].pageX:e.pageX,y:"changedTouches"in e?e.changedTouches[0].pageY:e.pageY})},n.handleMouseAndTouchMove=function(e){var t=n.props.runAreaPosition,a="changedTouches"in e?e.changedTouches[0].pageX:e.pageX,o="changedTouches"in e?e.changedTouches[0].pageY:e.pageY;n.props.updateRunAreaPosition(t.x+a-n.state.x,t.y+o-n.state.y),n.setState({x:a,y:o})},n.handleIframeMouseAndTouchMove=function(e){var t=n.props.iframeElement.getBoundingClientRect(),a=n.props.runAreaPosition,o=("changedTouches"in e?e.changedTouches[0].pageX:e.pageX)+Math.floor(t.left),r=("changedTouches"in e?e.changedTouches[0].pageY:e.pageY)+Math.floor(t.top);n.props.updateRunAreaPosition(a.x+o-n.state.x,a.y+r-n.state.y),n.setState({x:o,y:r})},n.handleMouseAndTouchUp=function(){document.body.removeEventListener("mousemove",n.handleMouseAndTouchMove),document.body.removeEventListener("touchmove",n.handleMouseAndTouchMove),document.body.removeEventListener("mouseup",n.handleMouseAndTouchUp),document.body.removeEventListener("touchend",n.handleMouseAndTouchUp);var e=n.props.iframeElement;e.contentDocument.removeEventListener("mousemove",n.handleIframeMouseAndTouchMove),e.contentDocument.removeEventListener("touchmove",n.handleIframeMouseAndTouchMove),e.contentDocument.removeEventListener("mouseup",n.handleMouseAndTouchUp),e.contentDocument.removeEventListener("touchend",n.handleMouseAndTouchUp)},n.state={x:0,y:0},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("div",{"touch-action":"none",onMouseDown:this.handleMouseAndTouchDown,onTouchStart:this.handleMouseAndTouchDown,style:{height:20,backgroundColor:"#ddd",borderTopLeftRadius:5,borderTopRightRadius:5}})}}]),t}(K.a.Component))||u)||u,se=Object(G.b)(function(e){var t=e.state;return{iframeElement:t.iframeElement,updateIframeElement:t.updateIframeElement,updateExecuteHTML:t.updateExecuteHTML,textFile:t.textFile}})(s=Object(G.c)(s=function(e){function t(){var e,n;I()(this,t);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(n=U()(this,(e=_()(t)).call.apply(e,[this].concat(o)))).executeHTML=function(e){var t=new DOMParser,a=null;try{(a=t.parseFromString(e[0].text,"text/html")).getElementsByTagName("parsererror").length&&(a=null)}catch(e){console.log(e)}if(a){var o=Array.prototype.slice.call(a.getElementsByTagName("script")),r=Array.prototype.slice.call(a.getElementsByTagName("link"));o.forEach(function(t){if(t.src){var n=t.src.split("/")[t.src.split("/").length-1],a=e.find(function(e){return e.fileName===n});if(a){for(var o=a.handWritingFormulaAreaId,r=a.handWritingFormulaAreas,c=a.text,i=0;i<o;i++)c=c.replace("/*".concat(i,"*/"),r[i].code);console.log(c);var l=new Blob([c],{type:"application/javascript"});t.src=URL.createObjectURL(l)}}else{for(var u=e.find(function(e){return e.fileName===t.type}),s=u.handWritingFormulaAreaId,d=u.handWritingFormulaAreas,p=u.text,h=0;h<s;h++)p=p.replace("/*".concat(h,"*/"),d[h].code);t.text=p}}),r.forEach(function(t){var n=t.href.split("/")[t.href.split("/").length-1],a=e.find(function(e){return"css"===e.type&&"stylesheet"===t.rel&&n===e.fileName});if(a){var o=new Blob([a.text],{type:"text/css"});t.href=URL.createObjectURL(o)}});var c=new Blob([a.documentElement.outerHTML],{type:"text/html"});n.props.iframeElement.contentWindow.location.replace(URL.createObjectURL(c))}},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){var e=le()(ce.a.mark(function e(){return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.props.updateIframeElement(this.refs.iframe);case 2:this.props.updateExecuteHTML(this.executeHTML),this.executeHTML(this.props.textFile);case 4:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"componentWillUnmount",value:function(){this.props.updateIframeElement(null)}},{key:"render",value:function(){return K.a.createElement("div",{onMouseUp:this.handleMouseUp,style:this.props.style},K.a.createElement(ue,null),K.a.createElement("iframe",{"touch-action":"auto",ref:"iframe",style:{width:this.props.style.width,height:this.props.style.height-20,borderBottomLeftRadius:5,borderBottomRightRadius:5,borderWidth:0}}))}}]),t}(K.a.Component))||s)||s,de=Object(G.b)(function(e,t){var n=e.state;return{textFileHandWritingFormulaAreas:n.activeTextFile.handWritingFormulaAreas,editor:n.editor}})(d=Object(G.c)(d=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(e){var t=n.props.editor;console.log(e),t.insert(e)},n.state={height:window.innerHeight-110},n}return $()(t,e),z()(t,[{key:"render",value:function(){var e=this;return K.a.createElement("div",{style:{position:"absolute",top:110,right:0,backgroundColor:"#ddd",width:300,height:this.state.height,zIndex:20,overflow:"auto"}},this.props.textFileHandWritingFormulaAreas.map(function(t,n){return!t.visible&&K.a.createElement("img",{onClick:function(){return e.handleClick(t.backgroundWord)},key:100*n,src:(a=(new XMLSerializer).serializeToString(t.handWritingFormulaEditor.domElement.children[t.handWritingFormulaEditor.domElement.children.length-1]),"data:image/svg+xml;charset=utf-8;base64,"+btoa(a)),style:{backgroundColor:"#fff",height:200}});var a}))}}]),t}(K.a.Component))||d)||d,pe=n(364),he=n.n(pe),me=n(365),ge=n(366),fe=n.n(ge),ve=n(368),ye=n(34),be=n.n(ye),xe=n(218),Fe=n.n(xe),Ae=n(219),ke=n.n(Ae),Ee=n(276),Se=n.n(Ee),we=n(292),Me=n.n(we),Ce=n(809),Te="",Re="",We=document.createElement("canvas").getContext("webgl"),Le=0;ke.a.import(Se.a),L=function(e,t){var n=null;return Ce.parse(e).statements.forEach(function(e){switch(e.type){case"declarator":e.declarators[0].name.name===t&&(n=e);break;case"function_declaration":"main"===e.name?e.body.statements.forEach(function(e){e.hasOwnProperty("declarators")&&e.declarators[0].name.name===t&&(n=e)}):e.name===t&&(n=e)}}),n},H=function(e,t){var n=L(e,t),a={type:"float",function:!1,parameter:null};if(n)switch(n.type){case"declarator":a={type:n.typeAttribute.name,function:!1,parameter:null};break;case"function_declaration":a={type:n.returnType.name,function:!0,parameter:n.parameters.map(function(e){return e.type_name})}}return a},B=function(e){var t=We.createShader(We.VERTEX_SHADER);We.shaderSource(t,"void main(void) {\n      mat2 expression".concat(R(e),";\n    }")),We.compileShader(t);var n=We.getShaderInfoLog(t),a=n.match(/\'[a-zA-Z]\d*\' : undeclared identifier/g),o=n.match(/\'[a-zA-Z]\d*\' : no matching overloaded function found/g),r=[];a&&(r=r.concat(a)),o&&(r=r.concat(o)),r=r.map(function(e){var t=e.split("'")[1],n=H(Te,e.split("'")[1]);return{name:t,type:n.type,function:n.function,parameter:n.parameter}});var c="";r.forEach(function(e){var t;c+=e.function?"".concat(e.type," ").concat(e.name,"(").concat((t="",e.parameter.forEach(function(e,n){t+="".concat(e," x").concat(n,",")}),t=t.slice(0,t.length-1)),"){\n      return ").concat(e.type,"(0.0);\n    }\n"):"".concat(e.type," ").concat(e.name," = ").concat(e.type,"(0.0);\n")}),We.shaderSource(t,"".concat(c,"\n      void main(void) {        \n        mat2 expression").concat(R(e),";\n      }")),We.compileShader(t);var i=(n=We.getShaderInfoLog(t)).split("'"),l="";switch(i[i.length-4]){case"const float":case"float":l="float";break;case"const highp 2-component vector of float":case"highp 2-component vector of float":l="vec2";break;case"const highp 3-component vector of float":case"highp 3-component vector of float":l="vec3";break;case"const highp 4-component vector of float":case"highp 4-component vector of float":l="vec4";break;case"const highp 2X2 matrix of float":case"highp 2X2 matrix of float":l="mat2";break;case"const highp 3X3 matrix of float":case"highp 3X3 matrix of float":l="mat3";break;case"const highp 4X4 matrix of float":case"highp 4X4 matrix of float":l="mat4";break;default:l="float"}return l},R=function(e){return e=(e=(e=(e=e.replace(/(\d+)(?!\.|\d)/g,"$1.0")).replace(/([a-zA-Z])(\d+)\.0/g,"$1$2")).replace(/\[(\d+)\.0/g,"[$1")).replace(/\.(\d+)\.0/g,".$1")},h=function(e){return e.index?"supsub"===e.body.body[0].type&&"\\sum"===e.body.body[0].base.name||"supsub"===e.index.body[0].type&&"\\sum"===e.index.body[0].base.name?(t="supsub"===e.body.body[0].type&&"\\sum"===e.body.body[0].base.name?A(e.body.body):(Le++,"".concat(B(C(e.body))," result").concat(Le,"=").concat(C(e.body.body),";")),n="result".concat(Le),a="supsub"===e.index.body[0].type&&"\\sum"===e.index.body[0].base.name?A(e.index.body):(Le++,"".concat(B(C(e.index.body))," result").concat(Le,"=").concat(C(e.index.body),";")),o="result".concat(Le),Le++,Re="".concat(B("pow(".concat(n,",1.0/").concat(o,")"))," result").concat(Le),"".concat(t,"\n    ").concat(a,"\n    ").concat(B("pow(".concat(n,",1.0/").concat(o,")"))," result").concat(Le,"= pow(").concat(n,",1.0/").concat(o,")\n    ")):"pow(".concat(C(e.body),",1.0/").concat(C(e.index.body),")"):function(){if("supsub"===e.body.body[0].type&&"\\sum"===e.body.body[0].base.name){var t=A(e.body.body),n="result".concat(Le);return Le++,Re="".concat(B("sqrt(".concat(n,")"))," result").concat(Le),"".concat(t,"\n  ").concat(B("sqrt(".concat(n,")"))," result").concat(Le,"= sqrt(").concat(n,")")}return"leftright"===e.body.body[0].type?"sqrt".concat(C(e.body.body)):"sqrt(".concat(C(e.body.body),")")}();var t,n,a,o},m=function(e){return"supsub"===e.numer.body[0].type&&"\\sum"===e.numer.body[0].base.name||"supsub"===e.denom.body[0].type&&"\\sum"===e.denom.body[0].base.name?(t="supsub"===e.numer.body[0].type&&"\\sum"===e.numer.body[0].base.name?A(e.numer.body):(Le++,"".concat(B(C(e.numer.body))," result").concat(Le,"=").concat(C(e.numer.body),";")),n="result".concat(Le),a="supsub"===e.denom.body[0].type&&"\\sum"===e.denom.body[0].base.name?A(e.denom.body):(Le++,"".concat(B(C(e.denom.body))," result").concat(Le,"=").concat(C(e.denom.body),";")),o="result".concat(Le),Le++,Re="".concat(B("".concat(n,"/").concat(o))," result").concat(Le),"".concat(t,"\n  ").concat(a,"\n  ").concat(B("".concat(n,"/").concat(o))," result").concat(Le,"=").concat(n,"/").concat(o,"\n  ")):"".concat(C(e.numer.body),"/").concat(C(e.denom.body));var t,n,a,o},g=function(e){return"pow(".concat("leftright"===e.base.type?C(e.base.body):C(e.base),",").concat("leftright"===e.sup.body[0].type?C(e.sup.body[0].body):C(e.sup.body),")")},f=function(e){return"leftright"===e.type?"sin".concat(C(e)):"sin(".concat(C(e),")")},v=function(e){return"leftright"===e.type?"cos".concat(C(e)):"cos(".concat(C(e),")")},y=function(e){return"leftright"===e.type?"tan".concat(C(e)):"tan(".concat(C(e),")")},b=function(e){var t="(";return"["===e.left&&(t="floor("),"".concat(t).concat(C(e.body)).concat(")")},x=function(e){return"leftright"===e.type?"log".concat(C(e)):"log(".concat(C(e),")")},F=function(e){var t=C(e[0].sub.body),n=e[1];return"leftright"===n.type?"log".concat(C(n),"/log(").concat(t,")"):"log(".concat(C(n),")/log(").concat(t,")")},A=function(e){Le++;var t=C(e.slice(1,e.length)),n=e[0].sub.body.findIndex(function(e){return"atom"===e.type&&"="===e.text}),a=C(e[0].sub.body.slice(0,n)),o=C(e[0].sub.body.slice(n+1,e[0].sub.body.length)),r=C(e[0].sup.body);return Re="".concat(B(t)," result").concat(Le),"".concat(B(t)," result").concat(Le," = ").concat(B(t),"(0.0);\n        for(float ").concat(a,"=").concat(o,";").concat(a,"<").concat(r,";").concat(a,"++){\n            result").concat(Le," += ").concat(t,";\n        }")},k=function(e,t){var n=C(e[0].sub.body),a=C(e[0].sup.body),o=C(e.slice(1,t)),r=C(e[t+1]);return"((".concat(r,"=>{return ").concat(p(Me()(ke.a.integral(o,r).toString())),"})(").concat(a,")-(").concat(r,"=>{return ").concat(p(Me()(ke.a.integral(o,r).toString())),"})(").concat(n,"))")},E=function(e,t){var n=C(e.slice(1,t)),a=C(e[t+1]);return"(".concat(p(Me()(ke.a.integral(n,a).toString())),")")},S=function(e){var t=C(e.base).replace(/Math\./g,"").replace(/pow\((.*)\,(.*)\)/g,"$1^$2");return ke.a.derivative(t,"x").toString()},w=function(e){var t=e[0].sub.body.findIndex(function(e){return"\\rightarrow"===e.value});return"((".concat(C(e[0].sub.body.slice(0,t-1)),")=>").concat(C(e[1]),")(").concat(C(e[0].sub.body.slice(t,e[0].sub.body.length)),")")},M=function(e){var t,n=1===e[0].length?"vec".concat(e.length):"mat".concat(e.length);return(t=e.slice(1,e.length)).unshift(C(e[0])),e=t.reduce(function(e,t){return"".concat(e,",").concat(C(t))}),"".concat(n,"(").concat(e,")")},W=function(e,t){return"accent"===t.type?"dot(".concat(C(e.base),",").concat(C(t.base),")"):"dot(".concat(C(e.base),",").concat(C(t),")")},T=function(e,t){return e.length>t?"atom"!==e[t].type&&"punct"!==e[t].type&&"bin"!==e[t].type&&"spacing"!==e[t].type&&"styling"!==e[t].type?"*"+C(e.slice(t,e.length)):"styling"===e[t].type?","+C(e.slice(t,e.length)):C(e.slice(t,e.length)):""},O=function(e,t){return e.length>t?("atom"===e[t].type||"punct"===e[t].type||"bin"===e[t].type||"spacing"===e[t].type||"leftright"===e[t].type&&(3===C(e[t]).length||/\,/.test(C(e[t]))||"["!==!e[t].left)?"":"*")+C(e.slice(t,e.length)):""},C=function(e){var t,n,a;if(!Array.isArray(e))switch(be()(e)){case"object":e=[e];break;case"string":return e}switch(e[0].type){case"textord":t="".concat("\\infty"===e[0].text?99999999.99:e[0].text).concat(e.length>1?("textord"!==e[1].type&&"atom"!==e[1].type&&"bin"!==e[1].type&&"spacing"!==e[1].type?"*":"")+C(e.slice(1,e.length)):"");break;case"mathord":t="".concat("\\pi"===e[0].text?"3.141592":(a="".concat(function(){if(e.length>1){if("leftright"===e[1].type&&"["===e[1].left&&"]"===e[1].right){var t=e.slice(1,e.length).findIndex(function(e){return!("leftright"===e.type&&"["===e.left&&"]"===e.right)});t=-1===t?e.length-1:t;var n=e.slice(2,t+1);return n.unshift("[".concat(C(e[1].body),"]")),"".concat(n.reduce(function(e,t){return e+"[".concat(C(t.body),"]")})).concat(O(e,t+1))}return O(e,1)}return""}()),e.length>1&&"atom"===e[1].type&&"="===e[1].text?"".concat(B(a)," ").concat(e[0].text).concat(a):"".concat(e[0].text).concat(a)));break;case"spacing":t="],[".concat(e.length>1?C(e.slice(1,e.length)):"");break;case"styling":t="".concat(C(e[0].body)).concat(T(e,1));break;case"atom":switch(e[0].text){case"\\cdot":t="*".concat(e.length>1?C(e.slice(1,e.length)):"");break;default:t="".concat(e[0].text).concat(e.length>1?C(e.slice(1,e.length)):"")}break;case"punct":t="".concat(e[0].value).concat(e.length>1?C(e.slice(1,e.length)):"");break;case"ordgroup":t="".concat(C(e[0].body)).concat(T(e,1));break;case"sqrt":t="".concat(h(e[0])).concat(T(e,1));break;case"accent":t="\\vec"===e[0].label||"\\overrightarrow"===e[0].label?function(){if(e.length>1){if("atom"===e[1].type&&"\\cdot"===e[1].text)return"".concat(W(e[0],e[2])).concat(T(e,3));if("atom"===e[1].type&&"="===e[1].text){var t=C(e.slice(1,e.length));return"".concat(B(t)," ").concat(C(e[0].base)).concat(t)}return"".concat(C(e[0].base)).concat(C(e.slice(1,e.length)))}return C(e[0].base)}():"";break;case"leftright":t="".concat("array"===e[0].body[0].type?e.length>1&&"vec"===M(e[0].body[0].body).slice(0,3)&&"leftright"===e[1].type&&"vec"===M(e[1].body[0].body).slice(0,3)?"dot(".concat(M(e[0].body[0].body),",").concat(M(e[1].body[0].body),")"):"".concat(M(e[0].body[0].body)).concat(T(e,1)):"".concat(b(e[0])).concat(T(e,1)));break;case"array":t=C(e[0].body[0][0]);break;case"genfrac":t="".concat(m(e[0])).concat(T(e,1));break;case"bin":switch(e[0].value){case"\\cdot":t="*".concat(C(e.slice(1,e.length)));break;default:t="".concat(e[0].value).concat(T(e,1))}break;case"op":switch(e[0].name){case"\\sin":t="".concat(f(e[1])).concat(T(e,2));break;case"\\cos":t="".concat(v(e[1])).concat(T(e,2));break;case"\\tan":t="".concat(y(e[1])).concat(T(e,2));break;case"\\log":t="".concat(x(e[1])).concat(T(e,2));break;case"\\int":var o=e.findIndex(function(e){return"mathord"===e.type&&"d"===e.text});t="".concat(E(e,o)).concat(T(e,o+2))}break;case"supsub":if(e[0].sub)switch(e[0].base.name){case"\\log":t="".concat(F(e)).concat(T(e,2));break;case"\\sum":t=A(e);break;case"\\int":var r=e.findIndex(function(e){return"mathord"===e.type&&"d"===e.text});t="".concat(k(e,r)).concat(T(e,r+2));break;case"\\lim":t="".concat(w(e)).concat(T(e,2));break;default:t=e[0].sub.body.find(function(e){return"textord"===e.type})?e.length>1?function(){if("leftright"===e[1].type)return L(Te,"".concat(C(e[0].base)).concat(C(e[0].sub.body)))?"".concat(C(e[0].base)).concat(C(e[0].sub.body)).concat(C(e.slice(1,e.length))):"".concat(C(e[0].base)).concat(C(e[0].sub.body)).concat(T(e,1));if("atom"===e[1].type&&"="===e[1].text){var t=R(C(e.slice(1,e.length)));return"".concat(B(t)," ").concat(C(e[0].base)).concat(C(e[0].sub.body)).concat(t)}return"".concat(C(e[0].base)).concat(C(e[0].sub.body)).concat(T(e,1))}():"".concat(C(e[0].base)).concat(C(e[0].sub.body)):"".concat(C(e[0].base)).concat(((n=e[0].sub.body.slice(1,e[0].sub.body.length)).unshift("".concat(e[0].sub.body[0].text)),"."+n.reduce(function(e,t){return e+t.text})+T(e,1)))}else t="\\prime"===e[0].sup.body[0].text?"".concat(S(e[0])).concat(T(e,1)):"".concat(g(e[0])).concat(T(e,1));break;default:t="".concat(e[0]).concat(T(e,1))}return t};var He,Be,Oe,De,Ie,Pe,ze,Ve,Ue,Ne,_e,je,$e,Ye,Xe,qe,Ke,Ge,Ze,Qe,Je,et,tt,nt,at,ot,rt,ct,it,lt,ut,st,dt,pt,ht,mt,gt,ft,vt,yt,bt,xt,Ft,At,kt,Et,St,wt,Mt,Ct,Tt,Rt,Wt,Lt,Ht,Bt,Ot,Dt,It,Pt,zt,Vt,Ut,Nt,_t,jt,$t,Yt,Xt,qt,Kt,Gt,Zt,Qt,Jt,en,tn,nn,an,on,rn,cn,ln,un,sn,dn,pn,hn,mn=p=function(e,t,n){for(Te=t,Le=n;e.search(/\n/)>=0;)e=e.replace(/\n/g," ");var a=Fe.a.__parse(e);return{code:R(C(a)),variable:Re,count:Le}},gn=n(832),fn=n.n(gn),vn=(He=Object(G.b)(function(e,t){var n,a=e.state;return n={updateHandWritingFormulaAreaHandWritingFormulaEditor:a.updateHandWritingFormulaAreaHandWritingFormulaEditor,applicationKey:a.key.applicationKey,hmacKey:a.key.hmacKey,keyChange:a.keyChange,editor:a.editor,editorValue:a.activeTextFile.text,updateActiveText:a.updateActiveText,activeTextFileHandWritingFormulaAreas:a.textFile[t.textfilenum].handWritingFormulaAreas,updateHandWritingFormulaAreaCode:a.updateHandWritingFormulaAreaCode,updateHandWritingFormulaAreaCounter:a.updateHandWritingFormulaAreaCounter,updateHandWritingFormulaAreaResultVariable:a.updateHandWritingFormulaAreaResultVariable},he()(n,"updateHandWritingFormulaAreaCode",a.updateHandWritingFormulaAreaCode),he()(n,"resultVariable",a.textFile[t.textfilenum].handWritingFormulaAreas[t.num].resultVariable),he()(n,"handWritingFormulaAreasCode",a.textFile[t.textfilenum].handWritingFormulaAreas[t.num].code),he()(n,"activeTextFileType",a.textFile[t.textfilenum].type),he()(n,"activeTextFile",a.textFile[t.textfilenum]),he()(n,"updateHandWritingFormulaAreaAnchor",a.updateHandWritingFormulaAreaAnchor),he()(n,"updateHandWritingFormulaAreaVisible",a.updateHandWritingFormulaAreaVisible),he()(n,"activeTextFileHandWritingFormulaAreaBackgroundWord",a.textFile[t.textfilenum].handWritingFormulaAreas[t.num].backgroundWord),n}),He(Be=Object(G.c)((Oe=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).errorFunc=function(e){console.log(e);for(var t=document.getElementsByClassName("error-msg");t.length>0;)t[0].parentNode.removeChild(t[0]);n.props.keyChange()},n.exportFunc=function(e){var t=n.refs.convert;n.state.autoConvert&&n.editor.convert();var a=e.detail.exports;if(a&&a["application/x-latex"]){t.disabled=!1;var o=n.cleanLatex(a["application/x-latex"]),r=n.props.editorValue,c=r.split("/*".concat(n.props.num,"*/"))[0],i=c.split("{");if("javascript"===n.props.activeTextFileType){for(var l=r,u=n.props.activeTextFileHandWritingFormulaAreas,s=0;s<u.length;s++)s!==n.props.num&&(l=l.replace("/*".concat(s,"*/"),u[s].code));n.props.updateHandWritingFormulaAreaCode(n.props.num,Object(ve.a)(o,l))}else{for(var d=function(){if(c.match(/void main(void)/))return"".concat(c,"}");if(c.split("}").length<i.length){var e=c.match(/(float|vec\d|mat\d) [a-zA-Z\d]+\(.*\)\{/g),t=c.split(e[e.length-1]);return"".concat(t[0],"\n              void main(void){\n                ").concat(e[e.length-1].match(/\(.*\)/)[0].replace("(","").replace(")","").replace(/\,/g,";"),";\n                ").concat(t[1],"\n              }")}return"".concat(c,"\n              void main(void){}")}(),p=n.props.activeTextFileHandWritingFormulaAreas,h=0;h<p.length;h++)d=d.replace("/*".concat(h,"*/"),p[h].code);var m=p.length>1?p[n.props.num-1].glslResultCounter:0,g=mn(o,d,m);n.props.updateHandWritingFormulaAreaCounter(n.props.num,g.count),m!==g.count?n.props.updateHandWritingFormulaAreaResultVariable(n.props.num,g.variable):n.props.updateHandWritingFormulaAreaResultVariable(n.props.num,""),console.log(g.code),n.props.updateHandWritingFormulaAreaCode(n.props.num,g.code)}}else a&&a["application/mathml+xml"]?t.disabled=!1:a&&a["application/mathofficeXML"]?t.disabled=!1:t.disabled=!0},n.cleanLatex=function(e){return e.includes("\\\\")?("\\begin{align*}"+e+"\\end{align*}").replace("\\overrightarrow","\\vec").replace("\\begin{aligned}","").replace("\\end{aligned}","").replace("\\llbracket","\\lbracket").replace("\\rrbracket","\\rbracket").replace("\\widehat","\\hat").replace(new RegExp("(align.{1})","g"),"aligned"):e.replace("\\overrightarrow","\\vec").replace("\\llbracket","\\lbracket").replace("\\rrbracket","\\rbracket").replace("\\widehat","\\hat").replace(new RegExp("(align.{1})","g"),"aligned")},n.handleDelete=function(){var e=n.props.editorValue,t=n.props.activeTextFileHandWritingFormulaAreaBackgroundWord;n.props.editor.$search.setOptions({needle:t,regExp:!1}),n.props.editor.$search.find(n.props.editor.session)?n.props.updateActiveText(e.replace(n.props.activeTextFileHandWritingFormulaAreaBackgroundWord,"")):n.props.updateActiveText(e.replace("/*".concat(n.props.num,"*/"),"")),setTimeout(function(){n.props.activeTextFile.handWritingFormulaAreas.forEach(function(e,t){var a="/*".concat(t,"*/");n.props.editor.$search.setOptions({needle:a,regExp:!1});var o=n.props.editor.$search.find(n.props.editor.session);if(o){var r=n.props.editor.renderer.textToScreenCoordinates(o.start);r.pageY+e.height>0&&r.pageY<window.innerHeight&&(n.props.updateHandWritingFormulaAreaAnchor(t,r.pageX,r.pageY),n.props.updateHandWritingFormulaAreaVisible(n.props.textfilenum,t,!0))}else n.props.updateHandWritingFormulaAreaVisible(n.props.textfilenum,t,!1)})},10)},n.handleConvert=function(){n.editor.convert()},n.handleClear=function(){n.editor.clear()},n.handleUndo=function(){n.editor.undo()},n.handleRedo=function(){n.editor.redo()},n.handleInsertCode=function(){var e=n.props.editorValue,t=n.props.activeTextFileHandWritingFormulaAreaBackgroundWord;n.props.editor.$search.setOptions({needle:t,regExp:!1}),n.props.editor.$search.find(n.props.editor.session)?n.props.updateActiveText(e.replace(n.props.activeTextFileHandWritingFormulaAreaBackgroundWord,n.props.handWritingFormulaAreasCode)):n.props.updateActiveText(e.replace("/*".concat(n.props.num,"*/"),n.props.handWritingFormulaAreasCode)),setTimeout(function(){n.props.activeTextFile.handWritingFormulaAreas.forEach(function(e,t){var a="/*".concat(t,"*/");n.props.editor.$search.setOptions({needle:a,regExp:!1});var o=n.props.editor.$search.find(n.props.editor.session);if(o){var r=n.props.editor.renderer.textToScreenCoordinates(o.start);r.pageY+e.height>0&&r.pageY<window.innerHeight&&(n.props.updateHandWritingFormulaAreaAnchor(t,r.pageX,r.pageY),n.props.updateHandWritingFormulaAreaVisible(n.props.textfilenum,t,!0))}else n.props.updateHandWritingFormulaAreaVisible(n.props.textfilenum,t,!1)})},10)},n.state={autoConvert:!1},n}return $()(t,e),z()(t,[{key:"componentWillUnmount",value:function(){fn.a.unuse(),fe.a.unuse(),this.refs.editor.removeEventListener("error",this.errorFunc),this.refs.editor.removeEventListener("exported",this.exportFunc)}},{key:"componentDidMount",value:function(){fn.a.use(),fe.a.use(),this.editor=me.a(this.refs.editor,{recognitionParams:{type:"MATH",protocol:"WEBSOCKET",apiVersion:"V4",server:{scheme:"https",host:"webdemoapi.myscript.com",applicationKey:this.props.applicationKey,hmacKey:this.props.hmacKey},v4:{math:{mimeTypes:["application/x-latex"],solver:{enable:!1}},text:{guides:{enable:!1},smartGuide:!1}}}}),this.props.updateHandWritingFormulaAreaHandWritingFormulaEditor(this.props.num,this.editor),this.refs.editor.addEventListener("error",this.errorFunc),this.refs.editor.addEventListener("exported",this.exportFunc)}},{key:"render",value:function(){return K.a.createElement("div",{style:this.props.style,ref:"handWritingFormulaArea",id:"handWritingFormulaArea"},K.a.createElement("div",{id:"resultVariableView"},this.props.resultVariable),K.a.createElement("button",{"touch-action":"auto",className:"handWritingFormulaAreaButton",id:"deleteButton",ref:"delete",onClick:this.handleDelete},"D"),K.a.createElement("button",{"touch-action":"auto",className:"handWritingFormulaAreaButton",id:"clearButton",ref:"clear",onClick:this.handleClear},"C"),K.a.createElement("button",{"touch-action":"auto",className:"handWritingFormulaAreaButton",id:"undoButton",ref:"undo",onClick:this.handleUndo},K.a.createElement(Z.FaReply,null)),K.a.createElement("button",{"touch-action":"auto",className:"handWritingFormulaAreaButton",id:"redoButton",ref:"redo",onClick:this.handleRedo},K.a.createElement(Z.FaShare,null)),K.a.createElement("button",{"touch-action":"auto",className:"handWritingFormulaAreaButton",id:"convertButton",ref:"convert",onClick:this.handleConvert},K.a.createElement(Z.FaSyncAlt,null)),K.a.createElement("button",{"touch-action":"auto",className:"handWritingFormulaAreaButton",id:"insertCodeButton",ref:"insertCode",onClick:this.handleInsertCode},K.a.createElement(Z.FaAngleDown,null)),K.a.createElement("div",{id:"handWritingFormulaEditor",ref:"editor","touch-action":"none",style:{height:this.props.style.height,width:this.props.style.width}}))}}]),t}(K.a.Component),Be=Oe))||Be)||Be),yn=Object(G.b)(function(e,t){var n=e.state;return{activeTextFileType:n.textFile[t.textfilenum].type,updateHandWritingFormulaAreaCodeEditor:n.updateHandWritingFormulaAreaCodeEditor}})(De=Object(G.c)(De=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleChange=function(e){n.setState({code:e})},n.state={code:n.props.code,mode:"javascript"},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){var e=this.props.activeTextFileType;this.setState({mode:e});var t=this.refs.aceEditor.editor;this.props.updateHandWritingFormulaAreaCodeEditor(this.props.num,t)}},{key:"render",value:function(){return K.a.createElement("div",{style:this.props.style},K.a.createElement(ae.a,{style:{width:this.props.style.width,height:this.props.style.height,zIndex:22},onChange:this.handleChange,ref:"aceEditor",mode:this.state.mode,theme:"dawn",value:this.state.code,fontSize:27,editorProps:{$blockScrolling:1/0}}))}}]),t}(K.a.Component))||De)||De,bn=Object(G.b)(function(e,t){var n=e.state;return{editor:n.editor,activeTextFileHandWritingFormulaAreaHandWritingFormulaEditor:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].handWritingFormulaEditor,activeTextFileHandWritingFormulaAreaBackgroundWord:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].backgroundWord,activeTextFileHandWritingFormulaAreaCodeEditor:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].codeEditor,handWritingFormulaAreaVisible:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].visible,handWritingFormulaAreaExchange:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].exchange,updateHandWritingFormulaAreaExchange:n.updateHandWritingFormulaAreaExchange,updateHandWritingFormulaAreaResizeEvent:n.updateHandWritingFormulaAreaResizeEvent,updateHandWritingFormulaAreaSize:n.updateHandWritingFormulaAreaSize,handWritingFormulaAreaWidth:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].width,handWritingFormulaAreaHeight:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].height,handWritingFormulaAreaAnchorX:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].x,handWritingFormulaAreaAnchorY:n.textFile[t.textfilenum].handWritingFormulaAreas[t.num].y,updateHandWritingFormulaAreaBackgroundWord:n.updateHandWritingFormulaAreaBackgroundWord}})(Ie=Object(G.c)(Ie=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleMouseDownOrTouchStart=function(){n.props.editor.blur()},n.handleExchange=function(){var e=n.props.handWritingFormulaAreaExchange;n.props.updateHandWritingFormulaAreaExchange(n.props.num,!e)},n.handleMouseAndTouchDownResize=function(e){e.preventDefault(),n.props.editor.blur(),n.props.updateHandWritingFormulaAreaResizeEvent(n.props.num,!0),document.body.addEventListener("mousemove",n.handleMouseAndTouchMoveResize),document.body.addEventListener("touchmove",n.handleMouseAndTouchMoveResize),document.body.addEventListener("mouseup",n.handleMouseAndTouchUpResize),document.body.addEventListener("touchend",n.handleMouseAndTouchUpResize);var t=n.props.editor,a=n.props.activeTextFileHandWritingFormulaAreaBackgroundWord;t.$search.setOptions({needle:a,regExp:!1});var o=t.$search.find(t.session);n.setState({prevEndRangeRow:o.end.row,prevEndRangeColumn:o.end.column})},n.handleMouseAndTouchMoveResize=function(e){if(0===e.buttons)n.handleMouseAndTouchUpResize(e);else{e.preventDefault();var t=e.pageX?e.pageX:e.touches?e.touches[0].pageX:e.changedTouches[0].pageX,a=e.pageY?e.pageY:e.touches?e.touches[0].pageY:e.changedTouches[0].pageY;a-n.props.handWritingFormulaAreaAnchorY>150&&n.props.updateHandWritingFormulaAreaSize(n.props.num,n.props.handWritingFormulaAreaWidth,a-n.props.handWritingFormulaAreaAnchorY),t-n.props.handWritingFormulaAreaAnchorX>280&&n.props.updateHandWritingFormulaAreaSize(n.props.num,t-n.props.handWritingFormulaAreaAnchorX,n.props.handWritingFormulaAreaHeight)}},n.handleMouseAndTouchUpResize=function(e){e.preventDefault();var t=n.props.handWritingFormulaAreaAnchorX+n.props.handWritingFormulaAreaWidth,a=n.props.handWritingFormulaAreaAnchorY+n.props.handWritingFormulaAreaHeight,o=n.props.editor,r="/*".concat(n.props.num,"*/");o.$search.setOptions({needle:r,regExp:!1});var c=o.$search.find(o.session).start,i={row:n.state.prevEndRangeRow,column:n.state.prevEndRangeColumn},l={column:0,row:0};l.column=t-n.props.handWritingFormulaAreaAnchorX>280?o.renderer.pixelToScreenCoordinates(t,a).column:o.renderer.pixelToScreenCoordinates(n.props.handWritingFormulaAreaAnchorX+280,a).column,l.row=a-n.props.handWritingFormulaAreaAnchorY>150?o.renderer.pixelToScreenCoordinates(t,a).row:o.renderer.pixelToScreenCoordinates(t,n.props.handWritingFormulaAreaAnchorY+150).row;for(var u="/*".concat(n.props.num,"*/"),s=l.column-c.column-u.length,d=0;d<s;d++)u+=" ";for(var p=0;p<l.row-c.row;p++){u+="\n";for(var h=0;h<l.column;h++)u+=" "}for(var m=o.session.getTextRange({start:{row:c.row,column:c.column},end:{row:i.row,column:i.column}}).split("\n"),g=0;g<m.length;g++)if(-1===m[g].indexOf(r)&&!/^[\n\s]+$/.test(m[g])){i.row-=m.length-g,i.column=0;break}o.session.replace({start:{row:c.row,column:c.column},end:{row:i.row,column:i.column}},u),n.props.updateHandWritingFormulaAreaBackgroundWord(n.props.num,u),n.props.activeTextFileHandWritingFormulaAreaHandWritingFormulaEditor.resize(),n.props.handWritingFormulaAreaExchange&&n.props.activeTextFileHandWritingFormulaAreaCodeEditor.resize(),n.props.updateHandWritingFormulaAreaResizeEvent(n.props.num,!1),document.body.removeEventListener("mousemove",n.handleMouseAndTouchMoveResize),document.body.removeEventListener("touchmove",n.handleMouseAndTouchMoveResize),document.body.removeEventListener("mouseup",n.handleMouseAndTouchUpResize),document.body.removeEventListener("touchend",n.handleMouseAndTouchUpResize)},n.state={prevEndRangeRow:0,prevEndRangeColumn:0},n}return $()(t,e),z()(t,[{key:"render",value:function(){var e=this;return K.a.createElement("div",{style:this.props.style,onMouseDown:this.handleMouseDownOrTouchStart,onTouchStart:this.handleMouseDownOrTouchStart},K.a.createElement("button",{"touch-action":"auto",className:"handWritingFormulaAreaButton",id:"exchangeButton",onClick:this.handleExchange},K.a.createElement(Z.FaExchangeAlt,null)),K.a.createElement("div",{"touch-action":"none",style:{backgroundColor:"#888",width:7,height:30,margin:0,padding:0,position:"absolute",right:0,bottom:0,cursor:"nwse-resize",zIndex:23},onMouseDown:this.handleMouseAndTouchDownResize,onTouchStart:this.handleMouseAndTouchDownResize}),K.a.createElement("div",{"touch-action":"none",style:{backgroundColor:"#888",width:30,height:7,margin:0,padding:0,position:"absolute",bottom:0,right:0,cursor:"nwse-resize",zIndex:23},onMouseDown:this.handleMouseAndTouchDownResize,onTouchStart:this.handleMouseAndTouchDownResize}),K.a.createElement(vn,{num:this.props.num,textfilenum:this.props.textfilenum,style:{position:"absolute",width:Math.floor(this.props.status.width-3),height:Math.floor(this.props.status.height-3),top:0,left:0}}),function(){if(e.props.status.exchange)return K.a.createElement(yn,{num:e.props.num,textfilenum:e.props.textfilenum,code:e.props.status.code,style:{position:"absolute",width:Math.floor(e.props.status.width-3),height:Math.floor(e.props.status.height-3),top:0,left:0}})}())}}]),t}(K.a.Component))||Ie)||Ie,xn=Object(G.b)(function(e){var t=e.state;return{runAreaRenderingFlag:t.runAreaRenderingFlag,listAreaRenderingFlag:t.listAreaRenderingFlag,runAreaPosition:t.runAreaPosition,textFile:t.textFile}})(Pe=Object(G.c)(Pe=function(e){function t(){return I()(this,t),U()(this,_()(t).apply(this,arguments))}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement(K.a.Fragment,null,K.a.createElement(oe,null),this.props.runAreaRenderingFlag&&K.a.createElement(se,{style:{position:"absolute",left:this.props.runAreaPosition.x,top:this.props.runAreaPosition.y,width:400,height:400,borderRadius:5,boxShadow:"2px 2px 10px grey",zIndex:26}}),this.props.listAreaRenderingFlag&&K.a.createElement(de,null),this.props.textFile.map(function(e,t){return e.handWritingFormulaAreas.map(function(e,n){return K.a.createElement(bn,{style:{position:"absolute",width:Math.floor(e.width),height:Math.floor(e.height),top:e.y,left:e.x,visibility:e.visible?"visible":"hidden"},status:e,textfilenum:t,num:n,key:n})})}))}}]),t}(K.a.Component))||Pe)||Pe,Fn=(n(305),n(7)),An=Object(G.b)(function(e){var t=e.state;return{activeTextFileFileName:t.activeTextFile.fileName,activeTextFileText:t.activeTextFile.text,editor:t.editor,textFile:t.textFile,activeTextFileHandWritingFormulaAreas:t.activeTextFile.handWritingFormulaAreas,updateSaveEvent:t.updateSaveEvent}})(ze=Object(G.c)(ze=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).download=function(e,t){var a=document.createEvent("MouseEvents");a.initMouseEvent("click",!0,!1,window,0,0,0,0,0,!1,!1,!1,!1,0,null);var o=document.createElement("a");o.textContent="save",o.download="application/json"===t?"handWritingFormula.json":n.props.activeTextFileFileName,e="application/json"===t?JSON.stringify(e):e,o.href=window.URL.createObjectURL(new Blob([e],{type:"text/plain"})),o.dataset.downloadurl=["text/plain",o.download,o.href].join(":"),o.dispatchEvent(a)},n.handleClick=function(){var e=n.props.editor.getValue();if("index.html"===n.props.activeTextFileFileName){var t=new DOMParser,a=null;try{(a=t.parseFromString(n.props.activeTextFileText,"text/html")).getElementsByTagName("parsererror").length&&(a=null)}catch(e){console.log(e)}a&&function(){for(var t=a.getElementsByTagName("script"),o=function(e){if(t[e].type){var a=n.props.textFile.find(function(n){return n.fileName===t[e].type});t[e].text=a.text}},r=0;r<t.length;r++)o(r);e=a.documentElement.outerHTML}()}n.download(e,"text/plain");var o=Object(Fn.n)(n.props.activeTextFileHandWritingFormulaAreas);o.forEach(function(e){e.handWritingFormulaEditor=null}),n.download(o,"application/json")},n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return K.a.createElement("button",{"touch-action":"auto",style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"save")}}]),t}(K.a.Component))||ze)||ze,kn=Object(G.b)(function(e){var t=e.state;return{updateHandWritingFormulaAreas:t.updateHandWritingFormulaAreas,updateHandWritingFormulaAreaId:t.updateHandWritingFormulaAreaId,editor:t.editor}})(Ve=Object(G.c)(Ve=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleChange=function(e){var t=e.target.files,a=new FileReader;a.readAsText(t[0]),a.onload=function(){if("application/json"===t[0].type){n.props.updateHandWritingFormulaAreas([]);var e=JSON.parse(a.result);n.props.updateHandWritingFormulaAreas(e),n.props.updateHandWritingFormulaAreaId(e.length)}else n.props.editor.setValue(a.result)},delete n.inputFile},n.handleClick=function(){n.inputFile=document.createElement("input"),n.inputFile.type="file",n.inputFile.addEventListener("change",n.handleChange);var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!1,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n.inputFile.dispatchEvent(e)},n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement(K.a.Fragment,null,K.a.createElement("button",{"touch-action":"auto",style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"load"))}}]),t}(K.a.Component))||Ve)||Ve,En=Object(G.b)("state")(Ue=Object(G.c)(Ue=function(e){function t(){return I()(this,t),U()(this,_()(t).apply(this,arguments))}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("div",{className:"dropDown",id:"modeSelect",style:{position:"absolute",left:this.props.style.x,top:this.props.style.y}},K.a.createElement(An,null),K.a.createElement(kn,null))}}]),t}(K.a.Component))||Ue)||Ue,Sn=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(e){var t=e.nativeEvent.x,a=e.nativeEvent.y;n.setState({click:!0,clickX:t,clickY:a})},n.handleDocumentClick=function(e){"file"!==e.target.id&&n.setState({click:!1})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.handleMouseLeave=function(){n.setState({fontColor:"#444"})},n.state={fontColor:"#444",click:!1,clickX:0,clickY:0},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleDocumentClick)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleDocumentClick)}},{key:"render",value:function(){var e=this;return K.a.createElement(K.a.Fragment,null,K.a.createElement("button",{"touch-action":"auto",id:"file",style:{color:this.state.fontColor},onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onClick:this.handleClick},"file"),function(){if(e.state.click)return K.a.createElement(En,{style:{x:e.state.clickX,y:e.state.clickY}})}())}}]),t}(K.a.Component),wn=(Object(G.b)(function(e){var t=e.state;return{hotReload:t.hotReload,updateHotReload:t.updateHotReload,iframeElement:t.iframeElement,stopButton:t.stopButton,runButton:t.runButton,updateRunButtonColor:t.updateRunButtonColor}})(Ne=Object(G.c)(Ne=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(){var e=n.props.hotReload;n.props.updateHotReload(!e);var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!1,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n.props.iframeElement?n.props.stopButton.dispatchEvent(t):(n.props.runButton.dispatchEvent(t),n.props.updateRunButtonColor({backgroundColor:" rgb(0, 185, 158)",fontColor:"#eee"}))},n.handleMouseLeave=function(){n.setState({fontColor:n.props.hotReload?"#fff":"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:n.props.hotReload?"#000":"rgb(0,185,158)"})},n.state={fontColor:"#000",backgroundColor:"#fff"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{"touch-action":"auto",style:{color:this.state.fontColor,backgroundColor:this.props.hotReload?"rgb(0,185,158)":"#fff"},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"HotReload")}}]),t}(K.a.Component))||Ne),Object(G.b)(function(e){return{keyChange:e.state.keyChange}})(_e=Object(G.c)(_e=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(){n.props.keyChange()},n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"APIKeyShift")}}]),t}(K.a.Component))||_e),Object(G.b)("state")(je=Object(G.c)(je=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(){for(var e=document.getElementsByClassName("error-msg");e.length>0;)e[0].parentNode.removeChild(e[0])},n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"errorDelete")}}]),t}(K.a.Component))||je),n(895)),Mn=n.n(wn),Cn=n(896),Tn=n.n(Cn),Rn=n(897),Wn=n.n(Rn),Ln=n(898),Hn=n.n(Ln),Bn=n(899),On=n.n(Bn),Dn=(n(900),Object(G.b)(function(e){var t=e.state;return{textFile:t.textFile,editor:t.editor,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,updateActiveText:t.updateActiveText,updateEditorValue:t.updateEditorValue,hotReload:t.hotReload,updateHotReload:t.updateHotReload,clearTextFile:t.clearTextFile,incrementId:t.incrementId,executeHTML:t.executeHTML,pushTextFile:t.pushTextFile}})($e=Object(G.c)($e=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).undoStackReset=function(){var e=n.props.editor.session.$undoManager,t=e.$undoStack.concat(),a=e.$redoStack.concat();n.props.updateActiveUndoStack(t),n.props.updateActiveRedoStack(a);var o=n.props.editor.getValue();n.props.updateActiveText(o),n.props.editor.setValue("")},n.handleClick=le()(ce.a.mark(function e(){var t,a;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.props.hotReload,n.props.updateHotReload(!1),e.next=4,n.props.clearTextFile();case 4:n.undoStackReset(),n.props.pushTextFile({id:0,type:"html",fileName:"index.html",removed:!1,text:On.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:1,type:"javascript",fileName:"main.js",removed:!1,text:Wn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:2,type:"css",fileName:"main.css",removed:!1,text:Hn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:3,type:"glsl",fileName:"fragmentShader.glsl",removed:!1,text:Mn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:4,type:"glsl",fileName:"vertexShader.glsl",removed:!1,text:Tn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.props.incrementId(),t&&(n.props.updateHotReload(t),a=n.props.textFile,n.props.executeHTML(a));case 16:case"end":return e.stop()}},e,this)})),n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"demo")}}]),t}(K.a.Component))||$e),n(901)),In=n.n(Dn),Pn=n(902),zn=n.n(Pn),Vn=n(903),Un=n.n(Vn),Nn=(Object(G.b)(function(e){var t=e.state;return{textFile:t.textFile,editor:t.editor,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,updateActiveText:t.updateActiveText,updateEditorValue:t.updateEditorValue,hotReload:t.hotReload,updateHotReload:t.updateHotReload,clearTextFile:t.clearTextFile,incrementId:t.incrementId,executeHTML:t.executeHTML,pushTextFile:t.pushTextFile}})(Ye=Object(G.c)(Ye=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).undoStackReset=function(){var e=n.props.editor.session.$undoManager,t=e.$undoStack.concat(),a=e.$redoStack.concat();n.props.updateActiveUndoStack(t),n.props.updateActiveRedoStack(a);var o=n.props.editor.getValue();n.props.updateActiveText(o),n.props.editor.setValue(""),n.props.updateEditorValue("")},n.handleClick=le()(ce.a.mark(function e(){var t,a;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.props.hotReload,n.props.updateHotReload(!1),e.next=4,n.props.clearTextFile();case 4:n.undoStackReset(),n.props.pushTextFile({id:0,type:"html",fileName:"index.html",removed:!1,text:Un.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:1,type:"javascript",fileName:"main.js",removed:!1,text:In.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:2,type:"css",fileName:"main.css",removed:!1,text:zn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.props.incrementId(),t&&(n.props.updateHotReload(t),a=n.props.textFile,n.props.executeHTML(a));case 12:case"end":return e.stop()}},e,this)})),n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"demo2")}}]),t}(K.a.Component))||Ye),n(904)),_n=n.n(Nn),jn=n(905),$n=n.n(jn),Yn=n(906),Xn=n.n(Yn),qn=n(907),Kn=n.n(qn),Gn=n(908),Zn=n.n(Gn),Qn=(Object(G.b)(function(e){var t=e.state;return{textFile:t.textFile,editor:t.editor,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,updateActiveText:t.updateActiveText,updateEditorValue:t.updateEditorValue,hotReload:t.hotReload,updateHotReload:t.updateHotReload,clearTextFile:t.clearTextFile,incrementId:t.incrementId,executeHTML:t.executeHTML,pushTextFile:t.pushTextFile}})(Xe=Object(G.c)(Xe=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).undoStackReset=function(){var e=n.props.editor.session.$undoManager,t=e.$undoStack.concat(),a=e.$redoStack.concat();n.props.updateActiveUndoStack(t),n.props.updateActiveRedoStack(a);var o=n.props.editor.getValue();n.props.updateActiveText(o),n.props.editor.setValue(""),n.props.updateEditorValue("")},n.handleClick=le()(ce.a.mark(function e(){var t,a;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.props.hotReload,n.props.updateHotReload(!1),e.next=4,n.props.clearTextFile();case 4:n.undoStackReset(),n.props.pushTextFile({id:0,type:"html",fileName:"index.html",removed:!1,text:Zn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:1,type:"javascript",fileName:"main.js",removed:!1,text:Xn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:2,type:"css",fileName:"main.css",removed:!1,text:Kn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:3,type:"glsl",fileName:"fragmentShader.glsl",removed:!1,text:_n.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:4,type:"glsl",fileName:"vertexShader.glsl",removed:!1,text:$n.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.props.incrementId(),t&&(n.props.updateHotReload(t),a=n.props.textFile,n.props.executeHTML(a));case 16:case"end":return e.stop()}},e,this)})),n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"demo3")}}]),t}(K.a.Component))||Xe),n(909)),Jn=n.n(Qn),ea=n(910),ta=n.n(ea),na=n(911),aa=n.n(na),oa=n(912),ra=n.n(oa),ca=n(913),ia=n.n(ca),la=(Object(G.b)(function(e){var t=e.state;return{textFile:t.textFile,editor:t.editor,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,updateActiveText:t.updateActiveText,updateEditorValue:t.updateEditorValue,hotReload:t.hotReload,updateHotReload:t.updateHotReload,clearTextFile:t.clearTextFile,incrementId:t.incrementId,executeHTML:t.executeHTML,pushTextFile:t.pushTextFile}})(qe=Object(G.c)(qe=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).undoStackReset=function(){var e=n.props.editor.session.$undoManager,t=e.$undoStack.concat(),a=e.$redoStack.concat();n.props.updateActiveUndoStack(t),n.props.updateActiveRedoStack(a);var o=n.props.editor.getValue();n.props.updateActiveText(o),n.props.editor.setValue(""),n.props.updateEditorValue("")},n.handleClick=le()(ce.a.mark(function e(){var t,a;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.props.hotReload,n.props.updateHotReload(!1),e.next=4,n.props.clearTextFile();case 4:n.undoStackReset(),n.props.pushTextFile({id:0,type:"html",fileName:"index.html",removed:!1,text:ia.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:1,type:"javascript",fileName:"main.js",removed:!1,text:aa.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:2,type:"css",fileName:"main.css",removed:!1,text:ra.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:3,type:"glsl",fileName:"fragmentShader.glsl",removed:!1,text:Jn.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:4,type:"glsl",fileName:"vertexShader.glsl",removed:!1,text:ta.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.props.incrementId(),t&&(n.props.updateHotReload(t),a=n.props.textFile,n.props.executeHTML(a));case 16:case"end":return e.stop()}},e,this)})),n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"demo4")}}]),t}(K.a.Component))||qe),n(914)),ua=n.n(la),sa=n(915),da=n.n(sa),pa=n(916),ha=n.n(pa),ma=Object(G.b)(function(e){var t=e.state;return{textFile:t.textFile,editor:t.editor,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,updateActiveText:t.updateActiveText,updateEditorValue:t.updateEditorValue,hotReload:t.hotReload,updateHotReload:t.updateHotReload,clearTextFile:t.clearTextFile,incrementId:t.incrementId,executeHTML:t.executeHTML,pushTextFile:t.pushTextFile}})(Ke=Object(G.c)(Ke=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).undoStackReset=function(){var e=n.props.editor.session.$undoManager,t=e.$undoStack.concat(),a=e.$redoStack.concat();n.props.updateActiveUndoStack(t),n.props.updateActiveRedoStack(a);var o=n.props.editor.getValue();n.props.updateActiveText(o),n.props.editor.setValue(""),n.props.updateEditorValue("")},n.handleClick=le()(ce.a.mark(function e(){var t,a;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.props.hotReload,n.props.updateHotReload(!1),e.next=4,n.props.clearTextFile();case 4:n.undoStackReset(),n.props.pushTextFile({id:0,type:"html",fileName:"index.html",removed:!1,text:da.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:1,type:"css",fileName:"main.css",removed:!1,text:ua.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:2,type:"javascript",fileName:"main.js",removed:!1,text:ha.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.props.incrementId(),t&&(n.props.updateHotReload(t),a=n.props.textFile,n.props.executeHTML(a));case 12:case"end":return e.stop()}},e,this)})),n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"noise")}}]),t}(K.a.Component))||Ke)||Ke,ga=n(917),fa=n.n(ga),va=n(918),ya=n.n(va),ba=n(919),xa=n.n(ba),Fa=Object(G.b)(function(e){var t=e.state;return{textFile:t.textFile,editor:t.editor,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,updateActiveText:t.updateActiveText,updateEditorValue:t.updateEditorValue,hotReload:t.hotReload,updateHotReload:t.updateHotReload,clearTextFile:t.clearTextFile,incrementId:t.incrementId,executeHTML:t.executeHTML,pushTextFile:t.pushTextFile}})(Ge=Object(G.c)(Ge=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).undoStackReset=function(){var e=n.props.editor.session.$undoManager,t=e.$undoStack.concat(),a=e.$redoStack.concat();n.props.updateActiveUndoStack(t),n.props.updateActiveRedoStack(a);var o=n.props.editor.getValue();n.props.updateActiveText(o),n.props.editor.setValue(""),n.props.updateEditorValue("")},n.handleClick=le()(ce.a.mark(function e(){var t,a;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.props.hotReload,n.props.updateHotReload(!1),e.next=4,n.props.clearTextFile();case 4:n.undoStackReset(),n.props.pushTextFile({id:0,type:"html",fileName:"index.html",removed:!1,text:ya.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:1,type:"css",fileName:"main.css",removed:!1,text:fa.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.undoStackReset(),n.props.pushTextFile({id:2,type:"javascript",fileName:"main.js",removed:!1,text:xa.a,undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}),n.props.incrementId(),t&&(n.props.updateHotReload(t),a=n.props.textFile,n.props.executeHTML(a));case 12:case"end":return e.stop()}},e,this)})),n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.state={fontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("button",{style:{color:this.state.fontColor},onClick:this.handleClick,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter},"default")}}]),t}(K.a.Component))||Ge)||Ge,Aa=Object(G.b)("state")(Ze=Object(G.c)(Ze=function(e){function t(){return I()(this,t),U()(this,_()(t).apply(this,arguments))}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("div",{"touch-action":"auto",className:"dropDown",id:"modeSelect",style:{position:"absolute",left:this.props.style.x,top:this.props.style.y}},K.a.createElement(ma,null),K.a.createElement(Fa,null))}}]),t}(K.a.Component))||Ze)||Ze,ka=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(e){var t=e.nativeEvent.x,a=e.nativeEvent.y;n.setState({click:!0,clickX:t,clickY:a})},n.handleDocumentClick=function(e){"mode"!==e.target.id&&n.setState({click:!1})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.handleMouseLeave=function(){n.setState({fontColor:"#444"})},n.state={fontColor:"#444",click:!1,clickX:0,clickY:0},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleDocumentClick)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleDocumentClick)}},{key:"render",value:function(){var e=this;return K.a.createElement(K.a.Fragment,null,K.a.createElement("button",{"touch-action":"auto",id:"mode",style:{color:this.state.fontColor},onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onClick:this.handleClick},"mode"),function(){if(e.state.click)return K.a.createElement(Aa,{style:{x:e.state.clickX,y:e.state.clickY}})}())}}]),t}(K.a.Component),Ea=function(e){function t(){return I()(this,t),U()(this,_()(t).apply(this,arguments))}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("div",{id:"header"},K.a.createElement(Sn,null),K.a.createElement(ka,null))}}]),t}(K.a.Component),Sa=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleMouseEnter=function(e){var t=n.state.fontColor;t[e]=" rgb(0, 185, 158)",n.setState({fontColor:t})},n.handleMouseLeave=function(e){var t=n.state.fontColor;t[e]="#000",n.setState({fontColor:t})},n.handleClick=function(e){n.props.selectionchange(n.extensions[e]),n.props.extensionchange(n.extensions[e]),n.props.handleextensionsclick()},n.extensions=["js","css","glsl"],n.state={fontColor:["#000","#000","#000"]},n}return $()(t,e),z()(t,[{key:"render",value:function(){var e=this;return K.a.createElement("div",{id:"extensions"},K.a.createElement("ul",{style:{margin:0,padding:0}},this.extensions.map(function(t,n){return K.a.createElement("li",{key:t},K.a.createElement("p",{className:"extension",style:{color:e.state.fontColor[n]},onClick:function(){return e.handleClick(n)},onMouseEnter:function(){return e.handleMouseEnter(n)},onMouseLeave:function(){return e.handleMouseLeave(n)}},t))})))}}]),t}(K.a.Component),wa=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleClick=function(){n.setState({click:!0})},n.handleExtensionsClick=function(){n.setState({click:!1})},n.handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.selectionChange=function(e){n.setState({selection:e})},n.state={selection:"js",fontColor:"#000",click:!1},n}return $()(t,e),z()(t,[{key:"render",value:function(){var e=this;return K.a.createElement(K.a.Fragment,null,K.a.createElement("p",{id:"extensionSelection",style:{color:this.state.fontColor},onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,onClick:this.handleClick},this.state.selection+" ▽"),function(){if(e.state.click)return K.a.createElement(Sa,{handleextensionsclick:e.handleExtensionsClick,selectionchange:e.selectionChange,extensionchange:e.props.extensionchange})}())}}]),t}(K.a.Component),Ma=Object(G.b)(function(e){var t=e.state;return{textFile:t.textFile,editor:t.editor,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,updateActiveText:t.updateActiveText,incrementId:t.incrementId,id:t.id,pushTextFile:t.pushTextFile}})(Qe=Object(G.c)(Qe=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleInputChange=function(e){n.setState({inputValue:e.target.value})},n.handleExtensionChange=function(e){n.setState({extensionName:e})},n.handleClick=le()(ce.a.mark(function e(){var t,a,o,r,c;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n.props.textFile.some(function(e){return e.fileName===n.state.inputValue+"."+n.state.extensionName})){e.next=12;break}return n.props.incrementId(),t=n.props.id,a=function(){var e;switch(n.state.extensionName){case"js":e="javascript";break;case"css":e="css";break;case"glsl":e="glsl"}return e}(),o=n.props.editor.session.$undoManager,r=o.$undoStack.slice(),c=o.$redoStack.slice(),e.next=9,n.props.updateActiveUndoStack(r);case 9:return e.next=11,n.props.updateActiveRedoStack(c);case 11:n.props.pushTextFile({id:t,type:a,fileName:n.state.inputValue+"."+n.state.extensionName,removed:!1,text:"",undoStack:[],redoStack:[],handWritingFormulaAreaId:0,handWritingFormulaAreas:[]});case 12:case"end":return e.stop()}},e,this)})),n.handleMouseEnter=function(){n.setState({createButtonFontColor:" rgb(0, 185, 158)"})},n.handleMouseLeave=function(){n.setState({createButtonFontColor:"#000"})},n.state={inputValue:"main",extensionName:"js",createButtonFontColor:"#000"},n}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("div",{"touch-action":"auto",className:"dropDown",id:"createTextForm",style:{top:this.props.y,left:this.props.x}},K.a.createElement("input",{type:"text",id:"fileName",value:this.state.inputValue,onChange:this.handleInputChange}),K.a.createElement(wa,{extensionchange:this.handleExtensionChange}),K.a.createElement("button",{id:"createButton",style:{color:this.state.createButtonFontColor},onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,onClick:this.handleClick},"create"))}}]),t}(K.a.Component))||Qe)||Qe,Ca=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleMouseEnter=function(){n.setState({fontColor:" rgb(0, 185, 158)"})},n.handleMouseLeave=function(){n.setState({fontColor:"#000"})},n.handleClick=function(e){n.setState({click:!0,clickX:e.nativeEvent.x,clickY:e.nativeEvent.y})},n.handleDocumentClick=function(e){"addButton"!==e.target.id&&"fileName"!==e.target.id&&"extensionSelection"!==e.target.id&&"extensions"!==e.target.id&&"extension"!==e.target.className&&n.setState({click:!1})},n.state={fontColor:"#000",click:!1,clickX:0,clickY:0},n}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleDocumentClick)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleDocumentClick)}},{key:"render",value:function(){var e=this;return K.a.createElement(K.a.Fragment,null,K.a.createElement("button",{"touch-action":"auto",id:"addButton",style:{color:this.state.fontColor},onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onClick:this.handleClick},"+"),function(){if(e.state.click)return K.a.createElement(Ma,{x:e.state.clickX,y:0})}())}}]),t}(K.a.Component),Ta=Object(G.b)(function(e){var t=e.state;return{hotReload:t.hotReload,updateHotReload:t.updateHotReload,editor:t.editor,updateActiveUndoStack:t.updateActiveUndoStack,updateActiveRedoStack:t.updateActiveRedoStack,updateActiveText:t.updateActiveText,textFile:t.textFile,changeActiveTextFile:t.changeActiveTextFile,updateHandWritingFormulaAreaAnchor:t.updateHandWritingFormulaAreaAnchor,executeHTML:t.executeHTML,activeTextFileFileName:t.activeTextFile.fileName,activeTextFile:t.activeTextFile,removeTextFile:t.removeTextFile,updateHandWritingFormulaAreaVisible:t.updateHandWritingFormulaAreaVisible,activeTextFileUndoStack:t.activeTextFile.undoStack,activeTextFileRedoStack:t.activeTextFile.redoStack,activeTextFileId:t.activeTextFileId}})(Je=Object(G.c)(Je=function(e){function t(e){var n;return I()(this,t),(n=U()(this,_()(t).call(this,e))).handleMouseEnter=function(){n.setState({mouseEnter:!0,deleteMouseEnter:!1})},n.handleMouseLeave=function(){n.setState({mouseEnter:!1,deleteMouseEnter:!1})},n.handleDeleteMouseEnter=function(){n.setState({deleteMouseEnter:!0})},n.handleDeleteMouseLeave=function(){n.setState({deleteMouseEnter:!1})},n.handleClick=function(){var e=le()(ce.a.mark(function e(t,a){var o,r,c,i,l,u;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("delete"===a.target.id||t===n.props.activeTextFileFileName){e.next=15;break}return o=n.props.hotReload,n.props.updateHotReload(!1),r=n.props.editor.session.$undoManager,c=r.$undoStack.slice(),i=r.$redoStack.slice(),e.next=8,n.props.updateActiveUndoStack(c);case 8:return e.next=10,n.props.updateActiveRedoStack(i);case 10:return l=n.props.textFile,u=l.findIndex(function(e){return e.fileName===t}),e.next=14,n.props.changeActiveTextFile(u);case 14:setTimeout(function(){r.reset();var e=n.props.activeTextFileUndoStack,t=n.props.activeTextFileRedoStack;if(r.$undoStack=e,r.$redoStack=t,n.props.textFile.forEach(function(e,t){e.handWritingFormulaAreas.forEach(function(e,a){if(t===n.props.activeTextFileId){var o="/*".concat(a,"*/");n.props.editor.$search.setOptions({needle:o,regExp:!1});var r=n.props.editor.$search.find(n.props.editor.session);if(r){var c=n.props.editor.renderer.textToScreenCoordinates(r.start);c.pageY+e.height>0&&c.pageY<window.innerHeight&&(n.props.updateHandWritingFormulaAreaAnchor(a,c.pageX,c.pageY),n.props.updateHandWritingFormulaAreaVisible(t,a,!0))}else n.props.updateHandWritingFormulaAreaVisible(t,a,!1)}else n.props.updateHandWritingFormulaAreaVisible(t,a,!1)})}),o){n.props.updateHotReload(o);var a=n.props.textFile;n.props.executeHTML(a)}},10);case 15:case"end":return e.stop()}},e,this)}));return function(t,n){return e.apply(this,arguments)}}(),n.handleDeleteClick=function(){var e=le()(ce.a.mark(function e(t){var a,o,r,c;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return a=n.props.hotReload,n.props.updateHotReload(!1),o=n.props.textFile,r=n.props.activeTextFileFileName===t?0:n.props.activeTextFileId,e.next=6,n.props.changeActiveTextFile(r);case 6:return c=o.find(function(e,n){return e.fileName===t}),e.next=9,n.props.removeTextFile(c);case 9:setTimeout(function(){var e=n.props.editor.session.$undoManager;e.reset();var t=Object(Fn.n)(n.props.activeTextFileUndoStack),o=Object(Fn.n)(n.props.activeTextFileRedoStack);if(e.$undoStack=t,e.$redoStack=o,a){n.props.updateHotReload(a);var r=n.props.textFile;n.props.executeHTML(r)}},10);case 10:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}(),n.state={mouseEnter:!1,deleteMouseEnter:!1},n}return $()(t,e),z()(t,[{key:"render",value:function(){var e,t,n=this;return K.a.createElement("button",{"touch-action":"auto",style:(e=n.props.activeTextFileFileName===n.props.fileName,t=n.state.mouseEnter,{color:e?t?"#000":"#fff":t?" rgb(0, 185, 158)":"#000",backgroundColor:e?" rgb(0, 185, 158)":"#ccc"}),onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onClick:function(e){return n.handleClick(n.props.fileName,e)}},function(){if("index.html"!==n.props.fileName)return K.a.createElement("p",{id:"delete",onMouseEnter:n.handleDeleteMouseEnter,onMouseLeave:n.handleDeleteMouseLeave,style:(e=n.props.activeTextFileFileName===n.props.fileName,t=n.state.mouseEnter,a=n.state.deleteMouseEnter,{color:e?t?a?"#fff":"#000":a?"#000":"#fff":t?a?"#000":" rgb(0, 185, 158)":a?" rgb(0, 185, 158)":"#000",margin:"0 10px 0 0",float:"left"}),onClick:function(){return n.handleDeleteClick(n.props.fileName)}},"×");var e,t,a}(),K.a.createElement("p",{style:{margin:0,float:"left"}},this.props.fileName))}}]),t}(K.a.Component))||Je)||Je,Ra=Object(G.b)(function(e){return{textFile:e.state.textFile}})(et=Object(G.c)(et=function(e){function t(){return I()(this,t),U()(this,_()(t).apply(this,arguments))}return $()(t,e),z()(t,[{key:"render",value:function(){return K.a.createElement("div",{id:"tab"},K.a.createElement(Ca,null),this.props.textFile.map(function(e,t,n){return K.a.createElement(Ta,{key:t,fileName:e.fileName})}))}}]),t}(K.a.Component))||et)||et,Wa=n(26),La=n.n(Wa),Ha=n(17),Ba=n.n(Ha),Oa=(n(35),tt=Fn.d.bound,nt=Fn.d.bound,at=Fn.d.bound,ot=Fn.d.bound,rt=Fn.d.bound,ct=Fn.d.bound,it=Fn.d.bound,lt=Fn.d.bound,ut=Fn.d.bound,st=Fn.d.bound,dt=Fn.d.bound,pt=Fn.d.bound,ht=Fn.d.bound,mt=Fn.d.bound,gt=Fn.d.bound,ft=Fn.d.bound,vt=Fn.d.bound,yt=Fn.d.bound,bt=Fn.d.bound,xt=Fn.d.bound,Ft=Fn.d.bound,At=Fn.d.bound,kt=Fn.d.bound,Et=Fn.d.bound,St=Fn.d.bound,wt=Fn.d.bound,Mt=Fn.d.bound,Ct=Fn.d.bound,Tt=Fn.d.bound,Rt=Fn.d.bound,Wt=Fn.d.bound,Lt=Fn.d.bound,Ht=Fn.d.bound,Bt=Fn.d.bound,Ot=Fn.d.bound,Dt=Fn.d.bound,It=Fn.d.bound,Pt=Fn.d.bound,zt=Fn.d.bound,Vt=Fn.d.bound,Ut=Fn.d.bound,Nt=Fn.d.bound,_t=function(){function e(){I()(this,e),La()(this,"keyArray",jt,this),La()(this,"key",$t,this),La()(this,"keyNum",Yt,this),La()(this,"tabChangeEvent",Xt,this),La()(this,"editorValue",qt,this),La()(this,"saveEvent",Kt,this),La()(this,"executeHTML",Gt,this),La()(this,"runButton",Zt,this),La()(this,"listButton",Qt,this),La()(this,"recycleButton",Jt,this),La()(this,"stopButton",en,this),La()(this,"hotReload",tn,this),La()(this,"editor",nn,this),La()(this,"iframeElement",an,this),La()(this,"textFile",on,this),La()(this,"activeTextFile",rn,this),La()(this,"id",cn,this),La()(this,"runAreaRenderingFlag",ln,this),La()(this,"listAreaRenderingFlag",un,this),La()(this,"runAreaPosition",sn,this),La()(this,"runButtonColor",dn,this),La()(this,"listButtonColor",pn,this),La()(this,"recycleButtonColor",hn,this)}return z()(e,[{key:"keyChange",value:function(){this.keyNum++,this.key=this.keyArray[this.keyNum%this.keyArray.length]}},{key:"updateTabChangeEvent",value:function(e){this.tabChangeEvent=e}},{key:"updateEditorValue",value:function(e){this.editorValue=e}},{key:"updateSaveEvent",value:function(e){this.saveEvent=e}},{key:"updateExecuteHTML",value:function(e){this.executeHTML=e}},{key:"updateRunButton",value:function(e){this.runButton=e}},{key:"updateListButton",value:function(e){this.listButton=e}},{key:"updateRecycleButton",value:function(e){this.recycleButton=e}},{key:"updateStopButton",value:function(e){this.stopButton=e}},{key:"updateHotReload",value:function(e){this.hotReload=e}},{key:"updateEditor",value:function(e){this.editor=e}},{key:"updateIframeElement",value:function(){var e=le()(ce.a.mark(function e(t){return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t;case 2:this.iframeElement=e.sent;case 3:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"pushTextFile",value:function(e){var t=this;this.textFile.some(function(t){return t.fileName===e.fileName})||(this.textFile.push(e),this.changeActiveTextFile(this.textFile.length-1),setTimeout(function(){t.editor.session.$undoManager.reset()},10))}},{key:"removeTextFile",value:function(){var e=le()(ce.a.mark(function e(t){var n;return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=this.textFile.filter(function(e){return e!==t}),e.next=3,n;case 3:this.textFile=e.sent;case 4:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"clearTextFile",value:function(){var e=le()(ce.a.mark(function e(){return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,[];case 2:this.textFile=e.sent;case 3:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"changeActiveTextFile",value:function(){var e=le()(ce.a.mark(function e(t){return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.textFile[t];case 2:this.activeTextFile=e.sent;case 3:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"updateActiveText",value:function(e){this.activeTextFile.text=e}},{key:"updateActiveUndoStack",value:function(){var e=le()(ce.a.mark(function e(t){return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t;case 2:this.activeTextFile.undoStack=e.sent;case 3:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"updateActiveRedoStack",value:function(){var e=le()(ce.a.mark(function e(t){return ce.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t;case 2:this.activeTextFile.redoStack=e.sent;case 3:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"incrementId",value:function(){this.id++}},{key:"updateRunAreaRenderingFlag",value:function(e){this.runAreaRenderingFlag=e}},{key:"updateListAreaRenderingFlag",value:function(e){this.listAreaRenderingFlag=e}},{key:"updateRunAreaPosition",value:function(e,t){this.runAreaPosition.x=e,this.runAreaPosition.y=t}},{key:"updateRunButtonColor",value:function(e){this.runButtonColor=e}},{key:"updateListButtonColor",value:function(e){this.listButtonColor=e}},{key:"updateRecycleButtonColor",value:function(e){this.recycleButtonColor=e}},{key:"pushHandWritingFormulaAreas",value:function(e){this.activeTextFile.handWritingFormulaAreas.push(e)}},{key:"updateHandWritingFormulaAreas",value:function(e){this.activeTextFile.handWritingFormulaAreas=e}},{key:"updateHandWritingFormulaAreaAnchor",value:function(e,t,n){this.activeTextFile.handWritingFormulaAreas[e].x=t,this.activeTextFile.handWritingFormulaAreas[e].y=n}},{key:"updateHandWritingFormulaAreaSize",value:function(e,t,n){this.activeTextFile.handWritingFormulaAreas[e].width=t,this.activeTextFile.handWritingFormulaAreas[e].height=n}},{key:"updateHandWritingFormulaAreaVisible",value:function(e,t,n){this.textFile[e].handWritingFormulaAreas[t].visible=n}},{key:"updateHandWritingFormulaAreaExchange",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].exchange=t}},{key:"updateHandWritingFormulaAreaCodeEditor",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].codeEditor=t}},{key:"updateHandWritingFormulaAreaHandWritingFormulaEditor",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].handWritingFormulaEditor=t}},{key:"updateHandWritingFormulaAreaCode",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].code=t}},{key:"updateHandWritingFormulaAreaCounter",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].glslResultCounter=t}},{key:"updateHandWritingFormulaAreaResultVariable",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].resultVariable=t}},{key:"updateHandWritingFormulaAreaModel",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].model=t}},{key:"updateHandWritingFormulaAreaResizeEvent",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].resizeEvent=t}},{key:"updateHandWritingFormulaAreaBackgroundWord",value:function(e,t){this.activeTextFile.handWritingFormulaAreas[e].backgroundWord=t}},{key:"updateHandWritingFormulaAreaId",value:function(e){this.activeTextFile.handWritingFormulaAreaId=e}},{key:"incrementHandWritingFormulaAreaId",value:function(){this.activeTextFile.handWritingFormulaAreaId++}},{key:"activeTextFileId",get:function(){var e=this;return this.textFile.findIndex(function(t){return t.fileName===e.activeTextFile.fileName})}}]),e}(),jt=Ba()(_t.prototype,"keyArray",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[{applicationKey:"331b4bdf-7ace-4265-94f1-b01504c78743",hmacKey:"44f4f4ce-fd0f-48a1-b517-65d2b9465413"},{applicationKey:"143af891-408e-43a9-9b2e-e43bc6c26793",hmacKey:"8992f8b6-0f74-4dd6-a578-c7ae4ca76302"}]}}),$t=Ba()(_t.prototype,"key",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{applicationKey:"331b4bdf-7ace-4265-94f1-b01504c78743",hmacKey:"44f4f4ce-fd0f-48a1-b517-65d2b9465413"}}}),Yt=Ba()(_t.prototype,"keyNum",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),Ba()(_t.prototype,"keyChange",[tt],Object.getOwnPropertyDescriptor(_t.prototype,"keyChange"),_t.prototype),Xt=Ba()(_t.prototype,"tabChangeEvent",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),Ba()(_t.prototype,"updateTabChangeEvent",[nt],Object.getOwnPropertyDescriptor(_t.prototype,"updateTabChangeEvent"),_t.prototype),qt=Ba()(_t.prototype,"editorValue",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),Ba()(_t.prototype,"updateEditorValue",[at],Object.getOwnPropertyDescriptor(_t.prototype,"updateEditorValue"),_t.prototype),Kt=Ba()(_t.prototype,"saveEvent",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Ba()(_t.prototype,"updateSaveEvent",[ot],Object.getOwnPropertyDescriptor(_t.prototype,"updateSaveEvent"),_t.prototype),Gt=Ba()(_t.prototype,"executeHTML",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Ba()(_t.prototype,"updateExecuteHTML",[rt],Object.getOwnPropertyDescriptor(_t.prototype,"updateExecuteHTML"),_t.prototype),Zt=Ba()(_t.prototype,"runButton",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Ba()(_t.prototype,"updateRunButton",[ct],Object.getOwnPropertyDescriptor(_t.prototype,"updateRunButton"),_t.prototype),Qt=Ba()(_t.prototype,"listButton",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Ba()(_t.prototype,"updateListButton",[it],Object.getOwnPropertyDescriptor(_t.prototype,"updateListButton"),_t.prototype),Jt=Ba()(_t.prototype,"recycleButton",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Ba()(_t.prototype,"updateRecycleButton",[lt],Object.getOwnPropertyDescriptor(_t.prototype,"updateRecycleButton"),_t.prototype),en=Ba()(_t.prototype,"stopButton",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Ba()(_t.prototype,"updateStopButton",[ut],Object.getOwnPropertyDescriptor(_t.prototype,"updateStopButton"),_t.prototype),tn=Ba()(_t.prototype,"hotReload",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),Ba()(_t.prototype,"updateHotReload",[st],Object.getOwnPropertyDescriptor(_t.prototype,"updateHotReload"),_t.prototype),nn=Ba()(_t.prototype,"editor",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Ba()(_t.prototype,"updateEditor",[dt],Object.getOwnPropertyDescriptor(_t.prototype,"updateEditor"),_t.prototype),an=Ba()(_t.prototype,"iframeElement",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Ba()(_t.prototype,"updateIframeElement",[pt],Object.getOwnPropertyDescriptor(_t.prototype,"updateIframeElement"),_t.prototype),on=Ba()(_t.prototype,"textFile",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[{id:0,type:"html",fileName:"index.html",removed:!1,text:"",undoStack:null,redoStack:null,handWritingFormulaAreaId:0,handWritingFormulaAreas:[]}]}}),Ba()(_t.prototype,"pushTextFile",[ht],Object.getOwnPropertyDescriptor(_t.prototype,"pushTextFile"),_t.prototype),Ba()(_t.prototype,"removeTextFile",[mt],Object.getOwnPropertyDescriptor(_t.prototype,"removeTextFile"),_t.prototype),Ba()(_t.prototype,"clearTextFile",[gt],Object.getOwnPropertyDescriptor(_t.prototype,"clearTextFile"),_t.prototype),rn=Ba()(_t.prototype,"activeTextFile",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return this.textFile[0]}}),Ba()(_t.prototype,"changeActiveTextFile",[ft],Object.getOwnPropertyDescriptor(_t.prototype,"changeActiveTextFile"),_t.prototype),Ba()(_t.prototype,"activeTextFileId",[Fn.e],Object.getOwnPropertyDescriptor(_t.prototype,"activeTextFileId"),_t.prototype),Ba()(_t.prototype,"updateActiveText",[vt],Object.getOwnPropertyDescriptor(_t.prototype,"updateActiveText"),_t.prototype),Ba()(_t.prototype,"updateActiveUndoStack",[yt],Object.getOwnPropertyDescriptor(_t.prototype,"updateActiveUndoStack"),_t.prototype),Ba()(_t.prototype,"updateActiveRedoStack",[bt],Object.getOwnPropertyDescriptor(_t.prototype,"updateActiveRedoStack"),_t.prototype),cn=Ba()(_t.prototype,"id",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),Ba()(_t.prototype,"incrementId",[xt],Object.getOwnPropertyDescriptor(_t.prototype,"incrementId"),_t.prototype),ln=Ba()(_t.prototype,"runAreaRenderingFlag",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),Ba()(_t.prototype,"updateRunAreaRenderingFlag",[Ft],Object.getOwnPropertyDescriptor(_t.prototype,"updateRunAreaRenderingFlag"),_t.prototype),un=Ba()(_t.prototype,"listAreaRenderingFlag",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),Ba()(_t.prototype,"updateListAreaRenderingFlag",[At],Object.getOwnPropertyDescriptor(_t.prototype,"updateListAreaRenderingFlag"),_t.prototype),sn=Ba()(_t.prototype,"runAreaPosition",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{x:window.innerWidth-600,y:100}}}),Ba()(_t.prototype,"updateRunAreaPosition",[kt],Object.getOwnPropertyDescriptor(_t.prototype,"updateRunAreaPosition"),_t.prototype),dn=Ba()(_t.prototype,"runButtonColor",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"}}}),Ba()(_t.prototype,"updateRunButtonColor",[Et],Object.getOwnPropertyDescriptor(_t.prototype,"updateRunButtonColor"),_t.prototype),pn=Ba()(_t.prototype,"listButtonColor",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"}}}),Ba()(_t.prototype,"updateListButtonColor",[St],Object.getOwnPropertyDescriptor(_t.prototype,"updateListButtonColor"),_t.prototype),hn=Ba()(_t.prototype,"recycleButtonColor",[Fn.l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{backgroundColor:"#eee",fontColor:" rgb(0, 185, 158)"}}}),Ba()(_t.prototype,"updateRecycleButtonColor",[wt],Object.getOwnPropertyDescriptor(_t.prototype,"updateRecycleButtonColor"),_t.prototype),Ba()(_t.prototype,"pushHandWritingFormulaAreas",[Mt],Object.getOwnPropertyDescriptor(_t.prototype,"pushHandWritingFormulaAreas"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreas",[Ct],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreas"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaAnchor",[Tt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaAnchor"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaSize",[Rt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaSize"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaVisible",[Wt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaVisible"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaExchange",[Lt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaExchange"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaCodeEditor",[Ht],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaCodeEditor"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaHandWritingFormulaEditor",[Bt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaHandWritingFormulaEditor"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaCode",[Ot],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaCode"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaCounter",[Dt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaCounter"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaResultVariable",[It],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaResultVariable"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaModel",[Pt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaModel"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaResizeEvent",[zt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaResizeEvent"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaBackgroundWord",[Vt],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaBackgroundWord"),_t.prototype),Ba()(_t.prototype,"updateHandWritingFormulaAreaId",[Ut],Object.getOwnPropertyDescriptor(_t.prototype,"updateHandWritingFormulaAreaId"),_t.prototype),Ba()(_t.prototype,"incrementHandWritingFormulaAreaId",[Nt],Object.getOwnPropertyDescriptor(_t.prototype,"incrementHandWritingFormulaAreaId"),_t.prototype),_t);n.d(t,"default",function(){return Ia});var Da={state:new Oa},Ia=function(e){function t(){return I()(this,t),U()(this,_()(t).apply(this,arguments))}return $()(t,e),z()(t,[{key:"componentDidMount",value:function(){X.a.use()}},{key:"componentWillUnmount",value:function(){X.a.unuse()}},{key:"render",value:function(){return K.a.createElement(K.a.Fragment,null,K.a.createElement(G.a,Da,K.a.createElement(K.a.Fragment,null,K.a.createElement(Ea,null),K.a.createElement(te,null),K.a.createElement(Ra,null),K.a.createElement(xn,null))))}}]),t}(K.a.Component)},822:function(e,t){},824:function(e,t){},895:function(e,t){e.exports="precision mediump float;\nuniform float time;\nuniform vec2 resolution;\n\nfloat r1(vec2 p){\n    return fract(sin(dot(p,vec2(12.9,78.2)))*36.2);\n}\nfloat r2(vec2 p){\n    return fract(sin(dot(p,vec2(31.7,91.3)))*63.12);\n}\nfloat n(float x,float y){\n    vec2 p=vec2(x,y);\n    vec2 i=floor(p);\n    vec2 j=fract(p);\n    vec2 a=vec2(r1(i),r2(i));\n    vec2 b=vec2(r1(i+vec2(1.0,0.0)),r2(i+vec2(1.0,0.0)));\n    vec2 c=vec2(r1(i+vec2(0.0,1.0)),r2(i+vec2(0.0,1.0)));\n    vec2 d=vec2(r1(i+vec2(1.0,1.0)),r2(i+vec2(1.0,1.0)));\n    vec2 e=p-i;\n    vec2 f=p-(i+vec2(1.0,0.0));\n    vec2 g=p-(i+vec2(0.0,1.0));\n    vec2 h=p-(i+vec2(1.0,1.0));\n    j=j*j*(3.0-2.0*j);\n    return ((dot(a,e)*(1.0-j.x)+dot(b,f)*j.x)*(1.0-j.y)+(dot(c,g)*(1.0-j.x)+dot(d,h)*j.x)*j.y)*0.5+0.5;\n}\nfloat t(float x,float z){\n    float v=0.0;\n    float m=0.0;                                   \n    for(float i=0.0;i<5.0;i++){\n        v+=pow(0.5,i)*n(pow(2.0,i)*x,pow(2.0,i)*z);\n        m+=pow(0.5,i);\n    }\n    return v/m;\n}\n\nfloat m(vec3 p){\n    vec3 pos=vec3(0.0,1.0,0.0);\n    vec3 n=normalize(pos);\n    return dot(p,n)/5.0+t(p.x,p.z)*1.3;\n}\n\nfloat d(vec3 p){\n    float obj1;\n    obj1=m(p);\n    return obj1;\n}\n\nvec3 genNormal(vec3 p){\n    float delta=0.01;\n    return normalize(vec3(\n        d(p+vec3(delta,0.0,0.0))-d(p+vec3(-delta,0.0,0.0)),\n        d(p+vec3(0.0,delta,0.0))-d(p+vec3(0.0,-delta,0.0)),\n        d(p+vec3(0.0,0.0,delta))-d(p+vec3(0.0,0.0,-delta))\n        ));\n}\n\nvoid main(void){\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    vec3 lightPos=vec3(30.0,30.0,0.0);\n    vec3 ambientColor=vec3(0.1);\n    vec3 cPos=vec3(0.0,-2.0,10.0);\n    cPos.z=-3.0*time;    \n    vec3 cDir=vec3(0.0,-0.5,-1.0);\n    vec3 cUp=vec3(0.0,1.0,0.0);\n    vec3 cSide=cross(cDir,cUp);\n    float targetDepth=1.0;\n    vec3 y=normalize(cSide*p.x+cUp*p.y+cDir*targetDepth);\n    vec3 z=cPos;\n    vec3 color=vec3(242.0/255.0,242.0/255.0,232.0/255.0);\n    float maxDist=10.0;\n    for(int i=0;i<50;i++){\n        z+=d(z)*y;\n        if(abs(d(z))<0.1){\n            color=vec3(t(z.x,0.0),t(z.x,z.z),t(0.0,z.z));\n            vec3 normal=genNormal(z);\n            color=color*vec3(clamp(dot(lightPos,normal),0.0,1.0))+ambientColor;\n            break;\n        }\n    }\n    \n    gl_FragColor=vec4(color,1.0);\n}"},896:function(e,t){e.exports="attribute vec3 position;\nvoid main(void){\n    gl_Position = vec4(position, 1.0);\n}"},897:function(e,t){e.exports='const create_program = (vs, fs) => {\n  const program = gl.createProgram();\n  gl.attachShader(program, vs);\n  gl.attachShader(program, fs);\n  gl.linkProgram(program);\n  if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    gl.useProgram(program);\n    return program;\n  } else {\n    return null;\n  }\n};\nconst create_shader = (text, type) => {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, text);\n  gl.compileShader(shader);\n  if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    return shader;\n  } else { \n    console.log(gl.getShaderInfoLog(shader));\n  }\n};\nconst create_vbo = data => {\n  const vbo = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  return vbo;\n};\nconst create_ibo = data => {\n  const ibo = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n  gl.bufferData(\n    gl.ELEMENT_ARRAY_BUFFER,\n    new Int16Array(data),\n    gl.STATIC_DRAW\n  );\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n  return ibo;\n};\nconst set_attribute = (vbo, attL, attS) => {\n  vbo.forEach((e, i, a) => {\n    gl.bindBuffer(gl.ARRAY_BUFFER, e);\n    gl.enableVertexAttribArray(attL[i]);\n    gl.vertexAttribPointer(attL[i], attS[i], gl.FLOAT, false, 0, 0);\n  });\n};\n\nconst canvas = document.getElementById("canvas");\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\n\nconst gl = canvas.getContext("webgl");\n   \nconst fs = document.getElementById("fs").text;\nconst vs = document.getElementById("vs").text;\n\nconst prg = create_program(\n  create_shader(vs, gl.VERTEX_SHADER),\n  create_shader(fs, gl.FRAGMENT_SHADER)\n);\nconst uniLocation = [];\nuniLocation[0] = gl.getUniformLocation(prg, "time");\nuniLocation[1] = gl.getUniformLocation(prg, "resolution");\n\nconst position = [\n  -1.0,1.0,0.0,\n  1.0,1.0,0.0,\n  -1.0,-1.0,0.0,\n  1.0,-1.0,0.0\n];\n\nconst index = [0, 2, 1, 1, 2, 3];\nconst attLocation = [];\nconst attStride = [];\n\nconst vPosition = create_vbo(position);\nattLocation[0] = gl.getAttribLocation(prg, "position");\nattStride[0] = 3;\n\nconst vIndex = create_ibo(index);\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vIndex);\n\ngl.clearColor(1.0, 0.0, 0.0, 1.0);\n\nconst startTime = new Date().getTime();\nconst render = () => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0,0,canvas.width,canvas.height);     \n    gl.uniform1f(uniLocation[0], (new Date().getTime() - startTime) * 0.001);\n    gl.uniform2fv(uniLocation[1], [canvas.width, canvas.height]);  \n    set_attribute([vPosition], attLocation, attStride);\n    gl.drawElements(gl.TRIANGLES, index.length, gl.UNSIGNED_SHORT, 0);\n    gl.flush();\n    requestAnimationFrame(render);\n  };\nrender();'},898:function(e,t){e.exports="body{\n    overflow:hidden;\n    margin:0;\n    padding:0;\n}\ncanvas{\n    width:100vw;\n    height:100vh;\n}"},899:function(e,t){e.exports='<html>\n    <head>\n    <link rel="stylesheet" href="main.css">\n\t<script id="fs" type="fragmentShader.glsl"><\/script>\n\t<script id="vs" type="vertexShader.glsl"><\/script>    \n    </head>\n    <body>\n        <canvas id="canvas"></canvas>        \n        <script src="main.js"><\/script>\n</body>\n</html>'},900:function(e){e.exports={}},901:function(e,t){e.exports="const canvas=document.getElementById('canvas');\ncanvas.width=canvas.clientWidth;\ncanvas.height=canvas.clientHeight;\nconst context=canvas.getContext('2d');\nconst w=canvas.width;\nconst h=canvas.height;\n\ncontext.fillStyle='#000';\ncontext.fillRect(0,0,canvas.width,canvas.height);\n\nconst d=(a,b)=>{\n    return a[0]*b[0]+a[1]*b[1];\n}\nconst f=(n)=>{\n    return n-Math.floor(n);\n}\nconst r=[];\nr[0] = (x,y)=>{\n    return f(Math.sin(d([x,y],[12.9,78.2]))*437.5)*2.0-1.0;\n}\nr[1] = (x,y)=>{\n    return f(Math.sin(d([x,y],[47.3,23.6]))*892.1)*2.0-1.0;\n}\nconst t=(x,y,r)=>{\n    return [x,y].map((e,i)=>e+r[i]);\n}\nconst p = (x,y)=>{\n    const a=[x,y].map(i=>Math.floor(i));\n    let b=[x,y].map(i=>f(i));\n    const i=[];\n    i[0]=a;\n    i[1]=t(a[0],a[1],[1,0]);\n    i[2]=t(a[0],a[1],[0,1]);\n    i[3]=t(a[0],a[1],[1,1]);\n    const l=[];\n    l[0]=t(x,y,i[0].map(e=>-e));\n    l[1]=t(x,y,i[1].map(e=>-e));\n    l[2]=t(x,y,i[2].map(e=>-e));\n    l[3]=t(x,y,i[3].map(e=>-e));\n    const v=[];\n    v[0]=[r[0](i[0][0],i[0][1]),r[1](i[0][0],i[0][1])];\n    v[1]=[r[0](i[1][0],i[1][1]),r[1](i[1][0],i[1][1])];\n    v[2]=[r[0](i[2][0],i[2][1]),r[1](i[2][0],i[2][1])];\n    v[3]=[r[0](i[3][0],i[3][1]),r[1](i[3][0],i[3][1])];\n    b=b.map(e=>e*e*(3-2*e));\n    return ((d([v[0][0],v[0][1]],[l[0][0],l[0][1]])*(1-b[0])+d([v[1][0],v[1][1]],[l[1][0],l[1][1]])*b[0])*(1-b[1])+(d([v[2][0],v[2][1]],[l[2][0],l[2][1]])*(1-b[0])+d([v[3][0],v[3][1]],[l[3][0],l[3][1]])*b[0])*b[1])*0.5+0.5;\n}\nconst o =(x,y) =>{\n    let v=0;\n    let m=0;\n    for(let i=0;i<5;i++){\n        v+=Math.pow(0.5,i)*p(x*Math.pow(2,i),y*Math.pow(2,i));\n        m+=Math.pow(0.5,i);\n    }\n    return v/m;\n}\n\nfor(let x=0;x<w;x++){\n    for(let y=0;y<h;y++){\n        const norX=(2*x-w)/w;\n        const norY=(2*y-h)/h;\n        const brightness=Math.floor(p(norX,norY)*255);\n        context.fillStyle=`rgb(${brightness},${brightness},${brightness})`;\n        context.fillRect(x,y,1,1);\n    }\n}"},902:function(e,t){e.exports="body{\n    overflow:hidden;\n    margin:0;\n    padding:0;\n}\ncanvas{\n    width:100vw;\n    height:100vh;\n}"},903:function(e,t){e.exports='<html>\n    <head>\n    <link rel="stylesheet" href="main.css">\n    </head>\n    <body>\n        <canvas id="canvas"></canvas>\n\t    <script src="main.js"><\/script>  \n    </body>\n</html>'},904:function(e,t){e.exports="precision mediump float;\nuniform mat4 invMatrix;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvoid main(void){\n    vec3 color=vec3(1.0,0.0,1.0);    \n    vec3 ambientColor=vec3(0.1);\n    vec3 lightPosition=vec3(0.0,10.0,-70.0);\n    vec3 eyeDirection=vec3(0.0,2.0,1.0);\n    vec3  lightVec  = lightPosition - vPosition;\n    vec3  invLight  = normalize(invMatrix * vec4(lightVec, 0.0)).xyz;\n    vec3  invEye    = normalize(invMatrix * vec4(eyeDirection, 0.0)).xyz;\n    vec3  halfLE    = normalize(invLight + invEye);\n    float diffuse   = clamp(dot(vNormal, invLight), 0.1, 1.0) + 0.1;\n    float specular  = pow(clamp(dot(vNormal, halfLE), 0.1, 1.0), 30.0);\n    color = color * vec3(diffuse) + vec3(specular) + ambientColor;\n    gl_FragColor=vec4(color,1.0);\n}"},905:function(e,t){e.exports="attribute vec3 position;\nattribute vec3 normal;                  \nuniform vec2 resolution;\nuniform float time;\nuniform mat4 mMatrix;\nuniform mat4 mvpMatrix;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#define PI 3.141592    \n\nvoid main(void){     \n  vPosition   = (mMatrix * vec4(position, 1.0)).xyz;\n  vNormal=normal;        \n  gl_Position=mvpMatrix * vec4(position, 1.0); \n}"},906:function(e,t){e.exports="    const create_program = (vs, fs) => {\n    const program = gl.createProgram();\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n    if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      gl.useProgram(program);\n      return program;\n    } else {\n      return null;\n    }\n  };\n  const create_shader = (text, type) => {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, text);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      return shader;\n    } else { \n      console.log(gl.getShaderInfoLog(shader));\n    }\n  };\n  const create_vbo = data => {\n    const vbo = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    return vbo;\n  };\n  const create_ibo = data => {\n    const ibo = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n    gl.bufferData(\n      gl.ELEMENT_ARRAY_BUFFER,\n      new Int16Array(data),\n      gl.STATIC_DRAW\n    );\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    return ibo;\n  };\n  const set_attribute = (vbo, attL, attS) => {\n    vbo.forEach((e, i) => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, e);\n      gl.enableVertexAttribArray(attL[i]);\n      gl.vertexAttribPointer(attL[i], attS[i], gl.FLOAT, false, 0, 0);\n    });\n  };\n  const torus = (row, column, irad, orad) => {\n    const pos = new Array(),\n      nor = new Array(),\n      idx = new Array();\n    for (let i = 0; i <= row; i++) {\n      const r = ((Math.PI * 2) / row) * i;\n      const rr = Math.cos(r);\n      const ry = Math.sin(r);\n      for (let ii = 0; ii <= column; ii++) {\n        const tr = ((Math.PI * 2) / column) * ii;\n        const tx = (rr * irad + orad) * Math.cos(tr);\n        const ty = ry * irad;\n        const tz = (rr * irad + orad) * Math.sin(tr);\n        const rx = rr * Math.cos(tr);\n        const rz = rr * Math.sin(tr);\n        pos.push(tx, ty, tz);\n        nor.push(rx, ry, rz);\n      }\n    }\n    for (let i = 0; i < row; i++) {\n      for (let ii = 0; ii < column; ii++) {\n        const r = (column + 1) * i + ii;\n        idx.push(r, r + column + 1, r + 1);\n        idx.push(r + column + 1, r + column + 2, r + 1);\n      }\n    }\n    return { p: pos, n: nor, i: idx };\n  };\n  const inverse = mat => {\n    const dest = [];\n    const a = mat[0],\n      b = mat[1],\n      c = mat[2],\n      d = mat[3],\n      e = mat[4],\n      f = mat[5],\n      g = mat[6],\n      h = mat[7],\n      i = mat[8],\n      j = mat[9],\n      k = mat[10],\n      l = mat[11],\n      m = mat[12],\n      n = mat[13],\n      o = mat[14],\n      p = mat[15],\n      q = a * f - b * e,\n      r = a * g - c * e,\n      s = a * h - d * e,\n      t = b * g - c * f,\n      u = b * h - d * f,\n      v = c * h - d * g,\n      w = i * n - j * m,\n      x = i * o - k * m,\n      y = i * p - l * m,\n      z = j * o - k * n,\n      A = j * p - l * n,\n      B = k * p - l * o,\n      ivd = 1 / (q * B - r * A + s * z + t * y - u * x + v * w);\n    dest[0] = (f * B - g * A + h * z) * ivd;\n    dest[1] = (-b * B + c * A - d * z) * ivd;\n    dest[2] = (n * v - o * u + p * t) * ivd;\n    dest[3] = (-j * v + k * u - l * t) * ivd;\n    dest[4] = (-e * B + g * y - h * x) * ivd;\n    dest[5] = (a * B - c * y + d * x) * ivd;\n    dest[6] = (-m * v + o * s - p * r) * ivd;\n    dest[7] = (i * v - k * s + l * r) * ivd;\n    dest[8] = (e * A - f * y + h * w) * ivd;\n    dest[9] = (-a * A + b * y - d * w) * ivd;\n    dest[10] = (m * u - n * s + p * q) * ivd;\n    dest[11] = (-i * u + j * s - l * q) * ivd;\n    dest[12] = (-e * z + f * x - g * w) * ivd;\n    dest[13] = (a * z - b * x + c * w) * ivd;\n    dest[14] = (-m * t + n * r - o * q) * ivd;\n    dest[15] = (i * t - j * r + k * q) * ivd;\n    return dest;\n  };\n\n  const matrix44MultiPly = (mat1, mat2) => {\n    return [\n      mat1[0] * mat2[0] + mat1[1] * mat2[4] + mat1[2] * mat2[8] + mat1[3] * mat2[12],\n      mat1[0] * mat2[1] + mat1[1] * mat2[5] + mat1[2] * mat2[9] + mat1[3] * mat2[13],\n      mat1[0] * mat2[2] + mat1[1] * mat2[6] + mat1[2] * mat2[10] + mat1[3] * mat2[14],\n      mat1[0] * mat2[3] + mat1[1] * mat2[7] + mat1[2] * mat2[11] + mat1[3] * mat2[15],\n      mat1[4] * mat2[0] + mat1[5] * mat2[4] + mat1[6] * mat2[8] + mat1[7] * mat2[12],\n      mat1[4] * mat2[1] + mat1[5] * mat2[5] + mat1[6] * mat2[9] + mat1[7] * mat2[13],\n      mat1[4] * mat2[2] + mat1[5] * mat2[6] + mat1[6] * mat2[10] + mat1[7] * mat2[14],\n      mat1[4] * mat2[3] + mat1[5] * mat2[7] + mat1[6] * mat2[11] + mat1[7] * mat2[15],\n      mat1[8] * mat2[0] + mat1[9] * mat2[4] + mat1[10] * mat2[8] + mat1[11] * mat2[12],\n      mat1[8] * mat2[1] + mat1[9] * mat2[5] + mat1[10] * mat2[9] + mat1[11] * mat2[13],\n      mat1[8] * mat2[2] + mat1[9] * mat2[6] + mat1[10] * mat2[10] + mat1[11] * mat2[14],\n      mat1[8] * mat2[3] + mat1[9] * mat2[7] + mat1[10] * mat2[11] + mat1[11] * mat2[15],\n      mat1[12] * mat2[0] + mat1[13] * mat2[4] + mat1[14] * mat2[8] + mat1[15] * mat2[12],\n      mat1[12] * mat2[1] + mat1[13] * mat2[5] + mat1[14] * mat2[9] + mat1[15] * mat2[13],\n      mat1[12] * mat2[2] + mat1[13] * mat2[6] + mat1[14] * mat2[10] + mat1[15] * mat2[14],\n      mat1[12] * mat2[3] + mat1[13] * mat2[7] + mat1[14] * mat2[11] + mat1[15] * mat2[15]\n    ];\n  };\n  const canvas=document.getElementById(\"canvas\");\n  canvas.width=canvas.clientWidth;\n  canvas.height=canvas.clientHeight;\n  const gl=canvas.getContext(\"webgl\");\n\n  const vs=document.getElementById(\"vs\").text;\n  const fs=document.getElementById(\"fs\").text;\n\n  const prg = create_program(\n    create_shader(vs, gl.VERTEX_SHADER),\n    create_shader(fs, gl.FRAGMENT_SHADER)\n  );\n  const uniLocation = [];\n  uniLocation[0] = gl.getUniformLocation(prg, 'time');\n  uniLocation[1] = gl.getUniformLocation(prg, 'resolution');\n  uniLocation[2] = gl.getUniformLocation(prg, 'mMatrix');\n  uniLocation[3] = gl.getUniformLocation(prg, 'mvpMatrix');\n  uniLocation[4] = gl.getUniformLocation(prg, 'invMatrix');\n\n  const model = torus(50, 50, 0.1, 0.2);\n  const position = model.p;\n  const normal = model.n;\n  const index = model.i;\n  const attLocation = [];\n  const attStride = [];\n\n  const vPosition = create_vbo(position);\n  attLocation[0] = gl.getAttribLocation(prg, 'position');\n  attStride[0] = 3;\n\n  const vNormal = create_vbo(normal);\n  attLocation[1] = gl.getAttribLocation(prg, 'normal');\n  attStride[1] = 3;\n\n  const vIndex = create_ibo(index);\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vIndex);\n\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n  gl.enable(gl.DEPTH_TEST);\n  gl.depthFunc(gl.LEQUAL);\n  const startTime = new Date().getTime();\n  const render = () => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    const t = (new Date().getTime() - startTime) * 0.001;\n    let mMatrix = [\n      1, 0, 0, 0, \n      0, 1, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1\n      ];\n    const rotateXMatrix = [\n      1, 0, 0, 0,\n      0, Math.cos(t), Math.sin(t), 0,\n      0, -Math.sin(t), Math.cos(t), 0,\n      0, 0, 0, 1\n    ];\n    const rotateYMatrix = [\n      Math.cos(t), 0, -Math.sin(t), 0,\n      0, 1, 0, 0,\n      Math.sin(t), 0, Math.cos(t), 0,\n      0, 0, 0, 1\n    ];\n    mMatrix = matrix44MultiPly(mMatrix, rotateXMatrix);\n    mMatrix = matrix44MultiPly(mMatrix, rotateYMatrix);\n    const iMatrix = inverse(mMatrix);\n    gl.uniform1f(uniLocation[0], t);\n    gl.uniform2fv(uniLocation[1], [canvas.width, canvas.height]);\n    gl.uniformMatrix4fv(uniLocation[2], false, mMatrix);\n    gl.uniformMatrix4fv(uniLocation[3], false, mMatrix);\n    gl.uniformMatrix4fv(uniLocation[4], false, iMatrix);\n    set_attribute([vPosition, vNormal], attLocation, attStride);\n    gl.drawElements(gl.TRIANGLES, index.length, gl.UNSIGNED_SHORT, 0);\n    gl.flush();\n    requestAnimationFrame(render);\n  };\n  render();"},907:function(e,t){e.exports="body{\n    overflow:hidden;\n    margin:0;\n    padding:0;\n}\ncanvas{\n    width:100vw;\n    height:100vh;\n}"},908:function(e,t){e.exports='<html>\n    <head>\n    <link rel="stylesheet" href="main.css">\n\t<script id="fs" type="fragmentShader.glsl"><\/script>\n\t<script id="vs" type="vertexShader.glsl"><\/script>    \n    </head>\n    <body>\n        <canvas id="canvas"></canvas>        \n        <script src="main.js"><\/script>\n</body>\n</html>'},909:function(e,t){e.exports="precision mediump float;\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D tex;\nvarying vec2 vTextureCoord;\n#define PI 3.141592\n\nfloat r1(vec3 p){    \n    return fract(sin(dot(p,vec3(127.1,311.7,231.4)))*437.53)*2.0-1.0;\n}\nfloat r2(vec3 p){    \n    return fract(sin(dot(p,vec3(491.4,134.1,712.4)))*831.23)*2.0-1.0;\n}\nfloat r3(vec3 p){    \n    return fract(sin(dot(p,vec3(323.3,941.3,531.2)))*612.31)*2.0-1.0;\n}\nfloat n(float x,float y,float z){\n    vec3 p=vec3(x,y,z);\n    vec3 i=floor(p);\n    vec3 j=fract(p);\n    vec3 f1=vec3(r1(i),r2(i),r3(i));\n    vec3 f2=vec3(r1(i+vec3(1.0,0.0,0.0)),r2(i+vec3(1.0,0.0,0.0)),r3(i+vec3(1.0,0.0,0.0)));\n    vec3 f3=vec3(r1(i+vec3(0.0,1.0,0.0)),r2(i+vec3(0.0,1.0,0.0)),r3(i+vec3(0.0,1.0,0.0)));\n    vec3 f4=vec3(r1(i+vec3(1.0,1.0,0.0)),r2(i+vec3(1.0,1.0,0.0)),r3(i+vec3(1.0,1.0,0.0)));\n    vec3 f5=vec3(r1(i+vec3(0.0,0.0,1.0)),r2(i+vec3(0.0,0.0,1.0)),r3(i+vec3(0.0,0.0,1.0)));\n    vec3 f6=vec3(r1(i+vec3(1.0,0.0,1.0)),r2(i+vec3(1.0,0.0,1.0)),r3(i+vec3(1.0,0.0,1.0)));\n    vec3 f7=vec3(r1(i+vec3(0.0,1.0,1.0)),r2(i+vec3(0.0,1.0,1.0)),r3(i+vec3(0.0,1.0,1.0)));\n    vec3 f8=vec3(r1(i+vec3(1.0,1.0,1.0)),r2(i+vec3(1.0,1.0,1.0)),r3(i+vec3(1.0,1.0,1.0)));\n    vec3 k1=p-i;\n    vec3 k2=p-(i+vec3(1.0,0.0,0.0));\n    vec3 k3=p-(i+vec3(0.0,1.0,0.0));\n    vec3 k4=p-(i+vec3(1.0,1.0,0.0));\n    vec3 k5=p-(i+vec3(0.0,0.0,1.0));\n    vec3 k6=p-(i+vec3(1.0,0.0,1.0));\n    vec3 k7=p-(i+vec3(0.0,1.0,1.0));\n    vec3 k8=p-(i+vec3(1.0,1.0,1.0));\n    j=j*j*(3.0-2.0*j);\n    return (((dot(f1,k1)*(1.0-j.x)+dot(f2,k2)*j.x)*(1.0-j.y)+(dot(f3,k3)*(1.0-j.x)+dot(f4,k4)*j.x)*j.y)*(1.0-j.z)+((dot(f5,k5)*(1.0-j.x)+dot(f6,k6)*j.x)*(1.0-j.y)+(dot(f7,k7)*(1.0-j.x)+dot(f8,k8)*j.x)*j.y)*j.z)*0.5+0.5;    \n}\n\nfloat o(float x,float y,float z){\n    float value=0.0;\n    float maxValue=0.0;\n    for(float i=0.0;i<4.0;i++){\n        value+=pow(0.5,i)*n(x*pow(2.0,i),y*pow(2.0,i),z);\n        maxValue+=pow(0.5,i);\n    }\n    return value/maxValue;\n}\n\nvoid main(void){\n    vec2 p = (gl_FragCoord.xy * 2.0-resolution) / min(resolution.x, resolution.y);  \n    p*=100.0;\n    vec2 uv = vTextureCoord;\n    vec3 nScale=vec3(3.0,5.0,time*0.3);\n    float nx=uv.x*nScale.x;\n    float ny=uv.y+nScale.y;\n    float nz=nScale.z;\n    float n = o(nx,ny,nz);\n    uv.y+=0.6*n-0.3;\n    float rdiff=0.003*sin(time);\n    float gdiff=-0.004*cos(time/3.0);\n    float bdiff=-0.002*sin(time*2.0);\n    vec3 color;\n    color.r=texture2D(tex,uv+vec2(rdiff,0.001*sin(time/2.0))).r;\n    color.g=texture2D(tex,uv+vec2(gdiff,-0.003*cos(time))).g;\n    color.b=texture2D(tex,uv+vec2(bdiff,0.002*sin(time*3.0))).b;        \n    gl_FragColor = vec4(color,1.0);    \n}"},910:function(e,t){e.exports="attribute vec3 position;\nattribute vec2 textureCoord;\nvarying vec2 vTextureCoord;\nvoid main(void){\n    vTextureCoord = textureCoord;\n    gl_Position = vec4(position, 1.0);\n}"},911:function(e,t){e.exports="const webGLStart =() => {\n  const create_program = (vs, fs) => {\n    const program = gl.createProgram();\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n    if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      gl.useProgram(program);\n      return program;\n    } else {\n      return null;\n    }\n  };\n  const create_shader = (text, type) => {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, text);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      return shader;\n    } else { \n      console.log(gl.getShaderInfoLog(shader));\n    }\n  };\n  const create_vbo = data => {\n    const vbo = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    return vbo;\n  };\n  const create_ibo = data => {\n    const ibo = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n    gl.bufferData(\n      gl.ELEMENT_ARRAY_BUFFER,\n      new Int16Array(data),\n      gl.STATIC_DRAW\n    );\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    return ibo;\n  };\n  const set_attribute = (vbo, attL, attS) => {\n    vbo.forEach((e, i, a) => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, e);\n      gl.enableVertexAttribArray(attL[i]);\n      gl.vertexAttribPointer(attL[i], attS[i], gl.FLOAT, false, 0, 0);\n    });\n  };\n\n  const create_texture = () => {\n    const c = document.createElement('canvas');\n    c.width = Math.pow(2, 10);\n    c.height = Math.pow(2, 10);\n    c.style.width = c.width;\n    c.style.width = c.height;\n    const ctx = c.getContext('2d');\n    ctx.fillStyle = '#000';\n    ctx.fillRect(0, 0, c.width, c.height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.font = 'italic bold 150px sans-serif';\n    ctx.fillText('WISS2018', c.width / 2, c.height / 2);\n    let img = new Image();\n    img.src = c.toDataURL('image/png', 1.0);\n    return new Promise(resolve => {\n      img.onload = () => resolve(img);\n    })\n      .then(img => {\n        const tex = gl.createTexture();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          img\n        );\n        gl.generateMipmap(gl.TEXTURE_2D);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        return tex;\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const canvas = document.getElementById('canvas');\n  canvas.width = canvas.clientWidth;\n  canvas.height = canvas.clientHeight;\n  const gl = canvas.getContext('webgl');\n\n  const vs = document.getElementById('vs').text;\n  const fs = document.getElementById('fs').text;\n\n  const prg = create_program(\n    create_shader(vs, gl.VERTEX_SHADER),\n    create_shader(fs, gl.FRAGMENT_SHADER)\n  );\n  const uniLocation = [];\n  uniLocation[0] = gl.getUniformLocation(prg, 'time');\n  uniLocation[1] = gl.getUniformLocation(prg, 'resolution');\n  uniLocation[2] = gl.getUniformLocation(prg, 'tex');\n\n  const position = [\n    -1.0,\n    1.0,\n    0.0,\n    1.0,\n    1.0,\n    0.0,\n    -1.0,\n    -1.0,\n    0.0,\n    1.0,\n    -1.0,\n    0.0\n  ];\n\n  const textureCoord = [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0];\n  const vPosition = create_vbo(position);\n  const vTextureCoord = create_vbo(textureCoord);\n  const attLocation = new Array();\n  attLocation[0] = gl.getAttribLocation(prg, 'position');\n  attLocation[1] = gl.getAttribLocation(prg, 'textureCoord');\n  const attStride = new Array();\n  attStride[0] = 3;\n  attStride[1] = 2;\n  set_attribute([vPosition, vTextureCoord], attLocation, attStride);\n  const index = [0, 2, 1, 1, 2, 3];\n  const vIndex = create_ibo(index);\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vIndex);\n  gl.activeTexture(gl.TEXTURE0);\n  create_texture().then(\n      texture=>{\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        const startTime = new Date().getTime();\n        const render = () => {\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.uniform1f(uniLocation[0], (new Date().getTime() - startTime) * 0.001);\n            gl.uniform2fv(uniLocation[1], [canvas.width, canvas.height]);\n            gl.uniform1i(uniLocation[2], 0);\n            gl.drawElements(gl.TRIANGLES, index.length, gl.UNSIGNED_SHORT, 0);\n            gl.flush();\n            requestAnimationFrame(render);\n        };\n        render();        \n      }\n      );\n};\nwebGLStart();\n"},912:function(e,t){e.exports="body{\n    overflow:hidden;\n    margin:0;\n    padding:0;\n}\ncanvas{\n    width:100%;\n    height:100%;\n}"},913:function(e,t){e.exports='<!DOCTYPE html>\n<html>\n    <head>\n        <script id="vs" type="vertexShader.glsl"><\/script>\n        <script id="fs" type="fragmentShader.glsl"><\/script>\n        <link rel="stylesheet" href="main.css">\n    </head>\n    <body>\n        <canvas id="canvas"></canvas>\n        <script src="main.js"><\/script>\n    </body>\n</html>'},914:function(e,t){e.exports="body{\n    margin:0;\n    overflow:hidden;\n}\ncanvas{\n    width:100%;\n    height:100%;\n}"},915:function(e,t){e.exports='<!DOCTYPE html>\n<html lang="ja">\n    <head>\n        <meta charset="utf-8">\n        <title>noise</title>\n        <link rel="stylesheet" href="main.css">\n        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/5.2.3/math.min.js"><\/script>\n    </head>\n    <body>\n        <canvas id="canvas"></canvas>\n        <script src="main.js"><\/script>\n    </body>\n</html>'},916:function(e,t){e.exports='const canvas=document.getElementById("canvas");\ncanvas.width=canvas.clientWidth;\ncanvas.height=canvas.clientHeight;\nconst context=canvas.getContext("2d");\nconst w=canvas.width;\nconst h=canvas.height;\n\nfor(let x=0;x<w;x++){\n    for(let y=0;y<h;y++){\n    const b=Math.floor(Math.random()*255);\n    context.fillStyle=`rgb(${b},${b},${b})`;\n    context.fillRect(x,y,1,1);\n   }\n}'},917:function(e,t){e.exports="body{\n    margin:0;\n    overflow:hidden;\n    background-color:#fff;\n}\ncanvas{\n    width:100%;\n    height:100%;\n}"},918:function(e,t){e.exports='<!DOCTYPE html>\n<html lang="ja">\n    <head>\n        <meta charset="utf-8">\n        <title>default</title>\n        <link rel="stylesheet" href="main.css">\n        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/5.2.3/math.min.js"><\/script>\n    </head>\n    <body> \n        <script src="main.js"><\/script>\n    </body>\n</html>'},919:function(e,t){e.exports=""}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,