(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{80:function(e,o,t){"use strict";t.r(o);var r=t(2),n=t.n(r),i=t(3),a=t.n(i),c=t(4),l=t.n(c),s=t(5),u=t.n(s),f=t(6),d=t.n(f),v=t(0),m=t.n(v),R=t(24),h=t.n(R),E=t(920),p=t.n(E),C=t(921),b=t.n(C),F=t(922),T=t.n(F),x=t(923),g=t.n(x),A=function(e){function o(e){var t;return n()(this,o),(t=l()(this,u()(o).call(this,e))).timeoutId=0,t}return d()(o,e),a()(o,[{key:"componentDidMount",value:function(){this.updateCanvas()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeoutId)}},{key:"updateCanvas",value:function(){var e=this;this.canvas.width=this.props.style.width,this.canvas.height=this.props.style.height,this.gl=this.canvas.getContext("webgl2");var o=function(e,o,t,r,n,i){var a=function(e,t){var r=o.createProgram();return o.attachShader(r,e),o.attachShader(r,t),o.linkProgram(r),o.getProgramParameter(r,o.LINK_STATUS)?(o.useProgram(r),r):null},c=function(e,t){var r=o.createShader(t);if(o.shaderSource(r,e),o.compileShader(r),o.getShaderParameter(r,o.COMPILE_STATUS))return r;alert(o.getShaderInfoLog(r)),console.log(o.getShaderInfoLog(r))},l=function(e){var t=o.createBuffer();return o.bindBuffer(o.ARRAY_BUFFER,t),o.bufferData(o.ARRAY_BUFFER,new Float32Array(e),o.STATIC_DRAW),o.bindBuffer(o.ARRAY_BUFFER,null),t},s=function(e,t,r){e.forEach(function(e,n,i){o.bindBuffer(o.ARRAY_BUFFER,e),o.enableVertexAttribArray(t[n]),o.vertexAttribPointer(t[n],r[n],o.FLOAT,!1,0,0)})},u=function(e,t){var r=o.createFramebuffer();o.bindFramebuffer(o.FRAMEBUFFER,r);var n=o.createRenderbuffer();o.bindRenderbuffer(o.RENDERBUFFER,n),o.renderbufferStorage(o.RENDERBUFFER,o.DEPTH_COMPONENT16,e,t),o.framebufferRenderbuffer(o.FRAMEBUFFER,o.DEPTH_ATTACHMENT,o.RENDERBUFFER,n);var i=o.createTexture();return o.bindTexture(o.TEXTURE_2D,i),o.texImage2D(o.TEXTURE_2D,0,o.RGBA,e,t,0,o.RGBA,o.UNSIGNED_BYTE,null),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MAG_FILTER,o.LINEAR),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MIN_FILTER,o.LINEAR),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_S,o.REPEAT),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_T,o.REPEAT),o.framebufferTexture2D(o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,i,0),o.bindTexture(o.TEXTURE_2D,null),o.bindRenderbuffer(o.RENDERBUFFER,null),o.bindFramebuffer(o.FRAMEBUFFER,null),{f:r,d:n,t:i}},f=a(c(t,o.VERTEX_SHADER),c(r,o.FRAGMENT_SHADER)),d=a(c(n,o.VERTEX_SHADER),c(i,o.FRAGMENT_SHADER)),v=[];v[0]=o.getUniformLocation(f,"resolution"),v[1]=o.getUniformLocation(f,"tex"),v[2]=o.getUniformLocation(f,"frameCount");var m=[];m[0]=o.getUniformLocation(d,"tex");var R=[0,2,1,1,2,3],h=[],E=[],p=[],C=[],b=l([-1,1,0,1,1,0,-1,-1,0,1,-1,0]);h[0]=o.getAttribLocation(f,"position"),E[0]=3,p[0]=o.getAttribLocation(d,"position"),C[0]=3;var F=l([0,0,1,0,0,1,1,1]);h[1]=o.getAttribLocation(f,"textureCoord"),E[1]=2,p[1]=o.getAttribLocation(d,"textureCoord"),C[1]=2;var T,x,g=(T=R,x=o.createBuffer(),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,x),o.bufferData(o.ELEMENT_ARRAY_BUFFER,new Int16Array(T),o.STATIC_DRAW),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,null),x);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,g);var A=[];A[0]=u(e.width,e.height),A[1]=u(e.width,e.height);(new Date).getTime();o.clearColor(1,0,0,1);var P=0,D=0;return o.useProgram(f),o.bindFramebuffer(o.FRAMEBUFFER,A[0].f),o.clear(o.COLOR_BUFFER_BIT),o.uniform2fv(v[0],[e.width,e.height]),o.uniform1i(v[1],0),o.uniform1f(v[2],0),s([b,F],h,E),o.drawElements(o.TRIANGLES,R.length,o.UNSIGNED_SHORT,0),o.bindFramebuffer(o.FRAMEBUFFER,null),P++,function(){o.useProgram(f),o.bindFramebuffer(o.FRAMEBUFFER,A[D].f),o.clear(o.COLOR_BUFFER_BIT),o.bindTexture(o.TEXTURE_2D,A[1-D].t),o.uniform2fv(v[0],[e.width,e.height]),o.uniform1i(v[1],0),o.uniform1f(v[2],P),s([b,F],h,E),o.drawElements(o.TRIANGLES,R.length,o.UNSIGNED_SHORT,0),o.bindFramebuffer(o.FRAMEBUFFER,null),o.useProgram(d),o.clear(o.COLOR_BUFFER_BIT),o.bindTexture(o.TEXTURE_2D,A[D].t),o.uniform1i(m[0],0),s([b,F],p,C),o.drawElements(o.TRIANGLES,R.length,o.UNSIGNED_SHORT,0),D=1-D,o.flush(),P++}}(this.canvas,this.gl,p()(),b()(),T()(),g()());!function t(){o(),e.timeoutId=setTimeout(t,500)}()}},{key:"handleResize",value:function(e,o){}},{key:"render",value:function(){var e=this;return m.a.createElement("canvas",h()({},this.props,{ref:function(o){e.canvas=o}}))}}]),o}(m.a.Component),P=t(924),D=t.n(P);t.d(o,"default",function(){return S});var S=function(e){function o(e){var t;return n()(this,o),(t=l()(this,u()(o).call(this,e))).state={width:window.innerWidth,height:window.innerHeight},t}return d()(o,e),a()(o,[{key:"componentDidMount",value:function(){D.a.use(),this.tempHandleResize=this.handleResize.bind(this),window.addEventListener("resize",this.tempHandleResize)}},{key:"componentWillUnmount",value:function(){D.a.unuse(),window.removeEventListener("resize",this.tempHandleResize)}},{key:"handleResize",value:function(e){var o=e.target.innerWidth,t=e.target.innerHeight;this.refs.createCanvas.handleResize(o,t),this.setState({width:o,height:t})}},{key:"render",value:function(){return m.a.createElement(A,{ref:"createCanvas",style:{width:this.state.width,height:this.state.height}})}}]),o}(m.a.Component)},920:function(e,o){e.exports=function(){return["#version 300 es","layout(location=0)in vec3 position;","layout(location=1)in vec2 textureCoord;","out vec2 vTextureCoord;","void main(void){","    gl_Position=vec4(position, 1.0);","    vTextureCoord=textureCoord;","}"].join("\n")}},921:function(e,o){e.exports=function(){return["#version 300 es","    precision highp float;  ","    uniform sampler2D tex;  ","    uniform vec2 resolution;","    uniform float frameCount;","    in vec2 vTextureCoord;","    out vec4 outColor;","    #define PI 3.141592","    const float wallReflectRatio=0.2;    ","    const float floorReflectRatio=0.5;    ","    const float sphereReflectRatio=0.9;","    const float boxReflectRatio=0.3;","    const vec3 backColor=vec3(0.5,0.5,0.9);","    const vec3 backCenter=vec3(0.0,3.0,3.0);","    const vec3 backSize=vec3(6.0,3.0,0.01);","    ","    const vec3 floorCenter=vec3(0.0);","    const vec3 floorSize=vec3(6.0,0.01,3.0);    ","    const vec3 sideColor=vec3(0.5,0.5,0.9);","    const vec3 rightCenter=vec3(6.0,3.0,0.0);","    const vec3 rightSize=vec3(0.01,3.0,3.0);","    const vec3 leftCenter=vec3(-6.0,3.0,0.0);","    const vec3 leftSize=vec3(0.01,3.0,3.0);    ","    const vec3 topColor=vec3(0.5,0.5,0.9);","    const vec3 topCenter=vec3(0.0,6.0,0.0);","    const vec3 topSize=vec3(6.0,0.01,3.0);    ","    const vec3 sphereColor=vec3(0.9,0.1,0.1);","    const vec3 sphereCenter=vec3(-2.0,2.0,1.0);","    const float sphereSize=2.0;    ","    const vec3 boxColor=vec3(0.1,0.9,0.9);","    const vec3 boxCenter=vec3(3.0,1.0,-1.0);","    const vec3 boxSize=vec3(1.0);    ","    const vec3 lightPos=vec3(0.0,3.0,-3.0);","    const vec3 cPos=vec3(0.0,3.5,-5.0);","    const vec3 cDir=vec3(0.0,-0.1,1.0);    ","    float boxDistFunc(vec3 p,vec3 b){","        return length(max(abs(p)-b,0.0))-0.01;","    }            ","    float sphereDistFunc(vec3 p,float s){","        return length(p)-s;","    } ","    float distFunc(vec3 p){                ","        float boxd=boxDistFunc(p-boxCenter,boxSize);","        float backd=boxDistFunc(p-backCenter,backSize);","        float floord=boxDistFunc(p-floorCenter,floorSize);","        float rightd=boxDistFunc(p-rightCenter,rightSize);","        float leftd=boxDistFunc(p-leftCenter,leftSize);","        float topd=boxDistFunc(p-topCenter,topSize);","        float sphere=sphereDistFunc(p-sphereCenter,sphereSize);","        return min(min(min(min(min(min(boxd,backd),floord),rightd),leftd),topd),sphere);","    }","    vec3 genNormal(vec3 p){","        float d=0.001;","        return normalize(vec3(","            distFunc(p+vec3(d,0.0,0.0))-distFunc(p+vec3(-d,0.0,0.0)),","            distFunc(p+vec3(0.0,d,0.0))-distFunc(p+vec3(0.0,-d,0.0)),","            distFunc(p+vec3(0.0,0.0,d))-distFunc(p+vec3(0.0,0.0,-d))","        ));","    }        ","    float random (vec3 p) {","        return fract(sin(dot(p,vec3(12.9898,78.233,135.1241)))* 43758.5453123);","    }","    ","    vec3 random3(vec3 p){","        return fract(vec3(sin(dot(p,vec3(82.9471,67.4192,74.1231)))*48101.3838718,sin(dot(p,vec3(73.1245,93.4719,47.4910)))*86019.1284912,sin(dot(p,vec3(63.1938,48.3951,97.4131)))*84193.192481))*2.0-1.0;","    }","    ","    vec3 getReflectRayColor(inout vec3 ray,inout vec3 origin,float t,inout bool hit){                ","        vec3 color=vec3(1.0);        ","        float distance=0.0;        ","        vec3 rPos=origin;","        float maxDist=20.0;","        for(int i=0;i<100;i++){","            distance=distFunc(rPos);","            if(abs(distance)<0.01){","                vec3 normal=genNormal(rPos);                ","                if(distance==boxDistFunc(rPos-boxCenter,boxSize)){","                    color=boxColor;","                    ray=random(rPos*frameCount)<boxReflectRatio?normalize(reflect(ray,normal)):normalize(random3(rPos*frameCount));","                }else if(distance==boxDistFunc(rPos-backCenter,backSize)){","                    color=backColor;","                    ray=random(rPos*frameCount)<wallReflectRatio?normalize(reflect(ray,normal)):normalize(random3(rPos*frameCount));","                }else if(distance==boxDistFunc(rPos-floorCenter,floorSize)){","                    vec3 floorColor=(mod(rPos.x,1.0)-0.5)*(mod(rPos.z,1.0)-0.5)<0.0?vec3(0.0):vec3(1.0);                                                           ","                    color=floorColor;","                    ray=random(rPos*frameCount)<floorReflectRatio?normalize(reflect(ray,normal)):normalize(random3(rPos*frameCount));                                        ","                }else if(distance==boxDistFunc(rPos-rightCenter,rightSize)){                    ","                    color=sideColor;","                    ray=random(rPos*frameCount)<wallReflectRatio?normalize(reflect(ray,normal)):normalize(random3(rPos*frameCount));                                        ","                }else if(distance==boxDistFunc(rPos-leftCenter,leftSize)){                                        ","                    color=sideColor;","                    ray=random(rPos*frameCount)<wallReflectRatio?normalize(reflect(ray,normal)):normalize(random3(rPos*frameCount));                                        ","                }else if(distance==boxDistFunc(rPos-topCenter,topSize)){                    ","                    color=topColor;","                    ray=random(rPos*frameCount)<wallReflectRatio?normalize(reflect(ray,normal)):normalize(random3(rPos*frameCount));                                        ","                }else if(distance==sphereDistFunc(rPos-sphereCenter,sphereSize)){                    ","                    color=sphereColor;","                    ray=random(rPos*frameCount)<sphereReflectRatio?normalize(reflect(ray,normal)):normalize(random3(rPos*frameCount));                                        ","                }                              ","                origin=rPos+normal*0.011;                ","                hit=true;","                break;","            }            ","            rPos+=distance*ray;","            if(length(rPos-origin)>maxDist){","                hit=false;","                break;","            } ","        }","        return color;","    }","    ","    void main(void){","        vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);        ","        vec3 color=vec3(0.0);                ","            vec3 cUp=mat3(1.0,0.0,0.0,","                        0.0,0.0,-1.0,","                        0.0,1.0,0.0)*cDir;","            vec3 cSide=cross(cDir,cUp);","            float depth=1.0;","            vec3 ray=normalize(cSide*p.x+cUp*p.y+cDir*depth);","            float distance=0.0;","            float rLen=0.0;","            vec3 rPos=cPos;                ","            float maxDist=10.0;","            float alpha=0.2;","            bool hit=false;","            for(int i=0;i<7;i++){","                color+=alpha*getReflectRayColor(ray,rPos,frameCount,hit);","                alpha*0.3;","                if(!hit)break;","            }           ","        color=(color+texture(tex,vec2(vTextureCoord.x,-vTextureCoord.y)).rgb*(frameCount-1.0))/frameCount;                ","        outColor=vec4(color,1.0);","    }"].join("\n")}},922:function(e,o){e.exports=function(){return["#version 300 es","layout(location=0)in vec3 position;","layout(location=1)in vec2 textureCoord;","out vec2 vTextureCoord;","void main(void){","    gl_Position=vec4(position, 1.0);","    vTextureCoord=textureCoord;","}"].join("\n")}},923:function(e,o){e.exports=function(){return["#version 300 es","precision highp float; ","uniform sampler2D tex; ","in vec2 vTextureCoord;","out vec4 outColor;","    ","void main(void){                 ","    vec3 color=texture(tex,vec2(vTextureCoord.x,-vTextureCoord.y)).rgb;                    ","    outColor=vec4(color,1.0);","}"].join("\n")}},924:function(e,o,t){var r,n=0,i=t(925);"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(o.locals=i.locals),o.use=o.ref=function(){return n++||(r=t(23)(i,{hmr:!0})),o},o.unuse=o.unref=function(){n>0&&!--n&&(r(),r=null)}},925:function(e,o,t){(e.exports=t(22)(!1)).push([e.i,"body {\n  margin: 0;\n  padding: 0;\n  overflow: hidden; }\n\n#root {\n  font-size: 0; }\n",""])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,